// Code generated by Kitex v0.13.1. DO NOT EDIT.

package uploadservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	upload "video_douyin/kitex_gen/upload"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"UploadVideo": kitex.NewMethodInfo(
		uploadVideoHandler,
		newUploadServiceUploadVideoArgs,
		newUploadServiceUploadVideoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateVideoInfo": kitex.NewMethodInfo(
		updateVideoInfoHandler,
		newUploadServiceUpdateVideoInfoArgs,
		newUploadServiceUpdateVideoInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetUploadProgress": kitex.NewMethodInfo(
		getUploadProgressHandler,
		newUploadServiceGetUploadProgressArgs,
		newUploadServiceGetUploadProgressResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetRecommendedTags": kitex.NewMethodInfo(
		getRecommendedTagsHandler,
		newUploadServiceGetRecommendedTagsArgs,
		newUploadServiceGetRecommendedTagsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	uploadServiceServiceInfo                = NewServiceInfo()
	uploadServiceServiceInfoForClient       = NewServiceInfoForClient()
	uploadServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return uploadServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return uploadServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return uploadServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "UploadService"
	handlerType := (*upload.UploadService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "upload",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func uploadVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*upload.UploadServiceUploadVideoArgs)
	realResult := result.(*upload.UploadServiceUploadVideoResult)
	success, err := handler.(upload.UploadService).UploadVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUploadServiceUploadVideoArgs() interface{} {
	return upload.NewUploadServiceUploadVideoArgs()
}

func newUploadServiceUploadVideoResult() interface{} {
	return upload.NewUploadServiceUploadVideoResult()
}

func updateVideoInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*upload.UploadServiceUpdateVideoInfoArgs)
	realResult := result.(*upload.UploadServiceUpdateVideoInfoResult)
	success, err := handler.(upload.UploadService).UpdateVideoInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUploadServiceUpdateVideoInfoArgs() interface{} {
	return upload.NewUploadServiceUpdateVideoInfoArgs()
}

func newUploadServiceUpdateVideoInfoResult() interface{} {
	return upload.NewUploadServiceUpdateVideoInfoResult()
}

func getUploadProgressHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*upload.UploadServiceGetUploadProgressArgs)
	realResult := result.(*upload.UploadServiceGetUploadProgressResult)
	success, err := handler.(upload.UploadService).GetUploadProgress(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUploadServiceGetUploadProgressArgs() interface{} {
	return upload.NewUploadServiceGetUploadProgressArgs()
}

func newUploadServiceGetUploadProgressResult() interface{} {
	return upload.NewUploadServiceGetUploadProgressResult()
}

func getRecommendedTagsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*upload.UploadServiceGetRecommendedTagsArgs)
	realResult := result.(*upload.UploadServiceGetRecommendedTagsResult)
	success, err := handler.(upload.UploadService).GetRecommendedTags(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUploadServiceGetRecommendedTagsArgs() interface{} {
	return upload.NewUploadServiceGetRecommendedTagsArgs()
}

func newUploadServiceGetRecommendedTagsResult() interface{} {
	return upload.NewUploadServiceGetRecommendedTagsResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) UploadVideo(ctx context.Context, req *upload.UploadRequest) (r *upload.UploadResponse, err error) {
	var _args upload.UploadServiceUploadVideoArgs
	_args.Req = req
	var _result upload.UploadServiceUploadVideoResult
	if err = p.c.Call(ctx, "UploadVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateVideoInfo(ctx context.Context, req *upload.UpdateRequest) (r *upload.UpdateResponse, err error) {
	var _args upload.UploadServiceUpdateVideoInfoArgs
	_args.Req = req
	var _result upload.UploadServiceUpdateVideoInfoResult
	if err = p.c.Call(ctx, "UpdateVideoInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUploadProgress(ctx context.Context, req *upload.ProgressRequest) (r *upload.ProgressResponse, err error) {
	var _args upload.UploadServiceGetUploadProgressArgs
	_args.Req = req
	var _result upload.UploadServiceGetUploadProgressResult
	if err = p.c.Call(ctx, "GetUploadProgress", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRecommendedTags(ctx context.Context, req *upload.TagsRequest) (r *upload.TagsResponse, err error) {
	var _args upload.UploadServiceGetRecommendedTagsArgs
	_args.Req = req
	var _result upload.UploadServiceGetRecommendedTagsResult
	if err = p.c.Call(ctx, "GetRecommendedTags", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
