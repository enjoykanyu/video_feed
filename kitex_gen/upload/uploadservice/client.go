// Code generated by Kitex v0.13.1. DO NOT EDIT.

package uploadservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	upload "video_douyin/kitex_gen/upload"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	UploadVideo(ctx context.Context, req *upload.UploadRequest, callOptions ...callopt.Option) (r *upload.UploadResponse, err error)
	UpdateVideoInfo(ctx context.Context, req *upload.UpdateRequest, callOptions ...callopt.Option) (r *upload.UpdateResponse, err error)
	GetUploadProgress(ctx context.Context, req *upload.ProgressRequest, callOptions ...callopt.Option) (r *upload.ProgressResponse, err error)
	GetRecommendedTags(ctx context.Context, req *upload.TagsRequest, callOptions ...callopt.Option) (r *upload.TagsResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kUploadServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kUploadServiceClient struct {
	*kClient
}

func (p *kUploadServiceClient) UploadVideo(ctx context.Context, req *upload.UploadRequest, callOptions ...callopt.Option) (r *upload.UploadResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UploadVideo(ctx, req)
}

func (p *kUploadServiceClient) UpdateVideoInfo(ctx context.Context, req *upload.UpdateRequest, callOptions ...callopt.Option) (r *upload.UpdateResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateVideoInfo(ctx, req)
}

func (p *kUploadServiceClient) GetUploadProgress(ctx context.Context, req *upload.ProgressRequest, callOptions ...callopt.Option) (r *upload.ProgressResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUploadProgress(ctx, req)
}

func (p *kUploadServiceClient) GetRecommendedTags(ctx context.Context, req *upload.TagsRequest, callOptions ...callopt.Option) (r *upload.TagsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetRecommendedTags(ctx, req)
}
