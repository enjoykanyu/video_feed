// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package upload

import (
	"context"
	"fmt"
)

type Tag struct {
	Id        int64  `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	Name      string `thrift:"name,2" frugal:"2,default,string" json:"name"`
	CreatedAt int64  `thrift:"created_at,3" frugal:"3,default,i64" json:"created_at"`
}

func NewTag() *Tag {
	return &Tag{}
}

func (p *Tag) InitDefault() {
}

func (p *Tag) GetId() (v int64) {
	return p.Id
}

func (p *Tag) GetName() (v string) {
	return p.Name
}

func (p *Tag) GetCreatedAt() (v int64) {
	return p.CreatedAt
}
func (p *Tag) SetId(val int64) {
	p.Id = val
}
func (p *Tag) SetName(val string) {
	p.Name = val
}
func (p *Tag) SetCreatedAt(val int64) {
	p.CreatedAt = val
}

func (p *Tag) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Tag(%+v)", *p)
}

var fieldIDToName_Tag = map[int16]string{
	1: "id",
	2: "name",
	3: "created_at",
}

type UploadRequest struct {
	UserId      int64    `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	VideoData   []byte   `thrift:"video_data,2" frugal:"2,default,binary" json:"video_data"`
	Title       string   `thrift:"title,3" frugal:"3,default,string" json:"title"`
	Description string   `thrift:"description,4" frugal:"4,default,string" json:"description"`
	Tags        []string `thrift:"tags,5" frugal:"5,default,list<string>" json:"tags"`
}

func NewUploadRequest() *UploadRequest {
	return &UploadRequest{}
}

func (p *UploadRequest) InitDefault() {
}

func (p *UploadRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *UploadRequest) GetVideoData() (v []byte) {
	return p.VideoData
}

func (p *UploadRequest) GetTitle() (v string) {
	return p.Title
}

func (p *UploadRequest) GetDescription() (v string) {
	return p.Description
}

func (p *UploadRequest) GetTags() (v []string) {
	return p.Tags
}
func (p *UploadRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *UploadRequest) SetVideoData(val []byte) {
	p.VideoData = val
}
func (p *UploadRequest) SetTitle(val string) {
	p.Title = val
}
func (p *UploadRequest) SetDescription(val string) {
	p.Description = val
}
func (p *UploadRequest) SetTags(val []string) {
	p.Tags = val
}

func (p *UploadRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadRequest(%+v)", *p)
}

var fieldIDToName_UploadRequest = map[int16]string{
	1: "user_id",
	2: "video_data",
	3: "title",
	4: "description",
	5: "tags",
}

type UploadResponse struct {
	Success bool   `thrift:"success,1" frugal:"1,default,bool" json:"success"`
	Message string `thrift:"message,2" frugal:"2,default,string" json:"message"`
	VideoId int64  `thrift:"video_id,3" frugal:"3,default,i64" json:"video_id"`
}

func NewUploadResponse() *UploadResponse {
	return &UploadResponse{}
}

func (p *UploadResponse) InitDefault() {
}

func (p *UploadResponse) GetSuccess() (v bool) {
	return p.Success
}

func (p *UploadResponse) GetMessage() (v string) {
	return p.Message
}

func (p *UploadResponse) GetVideoId() (v int64) {
	return p.VideoId
}
func (p *UploadResponse) SetSuccess(val bool) {
	p.Success = val
}
func (p *UploadResponse) SetMessage(val string) {
	p.Message = val
}
func (p *UploadResponse) SetVideoId(val int64) {
	p.VideoId = val
}

func (p *UploadResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadResponse(%+v)", *p)
}

var fieldIDToName_UploadResponse = map[int16]string{
	1: "success",
	2: "message",
	3: "video_id",
}

type UpdateRequest struct {
	VideoId     int64    `thrift:"video_id,1" frugal:"1,default,i64" json:"video_id"`
	Title       string   `thrift:"title,2" frugal:"2,default,string" json:"title"`
	Description string   `thrift:"description,3" frugal:"3,default,string" json:"description"`
	Tags        []string `thrift:"tags,4" frugal:"4,default,list<string>" json:"tags"`
}

func NewUpdateRequest() *UpdateRequest {
	return &UpdateRequest{}
}

func (p *UpdateRequest) InitDefault() {
}

func (p *UpdateRequest) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *UpdateRequest) GetTitle() (v string) {
	return p.Title
}

func (p *UpdateRequest) GetDescription() (v string) {
	return p.Description
}

func (p *UpdateRequest) GetTags() (v []string) {
	return p.Tags
}
func (p *UpdateRequest) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *UpdateRequest) SetTitle(val string) {
	p.Title = val
}
func (p *UpdateRequest) SetDescription(val string) {
	p.Description = val
}
func (p *UpdateRequest) SetTags(val []string) {
	p.Tags = val
}

func (p *UpdateRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateRequest(%+v)", *p)
}

var fieldIDToName_UpdateRequest = map[int16]string{
	1: "video_id",
	2: "title",
	3: "description",
	4: "tags",
}

type UpdateResponse struct {
	Success bool   `thrift:"success,1" frugal:"1,default,bool" json:"success"`
	Message string `thrift:"message,2" frugal:"2,default,string" json:"message"`
}

func NewUpdateResponse() *UpdateResponse {
	return &UpdateResponse{}
}

func (p *UpdateResponse) InitDefault() {
}

func (p *UpdateResponse) GetSuccess() (v bool) {
	return p.Success
}

func (p *UpdateResponse) GetMessage() (v string) {
	return p.Message
}
func (p *UpdateResponse) SetSuccess(val bool) {
	p.Success = val
}
func (p *UpdateResponse) SetMessage(val string) {
	p.Message = val
}

func (p *UpdateResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateResponse(%+v)", *p)
}

var fieldIDToName_UpdateResponse = map[int16]string{
	1: "success",
	2: "message",
}

type ProgressRequest struct {
	UploadId int64 `thrift:"upload_id,1" frugal:"1,default,i64" json:"upload_id"`
}

func NewProgressRequest() *ProgressRequest {
	return &ProgressRequest{}
}

func (p *ProgressRequest) InitDefault() {
}

func (p *ProgressRequest) GetUploadId() (v int64) {
	return p.UploadId
}
func (p *ProgressRequest) SetUploadId(val int64) {
	p.UploadId = val
}

func (p *ProgressRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProgressRequest(%+v)", *p)
}

var fieldIDToName_ProgressRequest = map[int16]string{
	1: "upload_id",
}

type ProgressResponse struct {
	Progress int32  `thrift:"progress,1" frugal:"1,default,i32" json:"progress"`
	Status   string `thrift:"status,2" frugal:"2,default,string" json:"status"`
	Message  string `thrift:"message,3" frugal:"3,default,string" json:"message"`
}

func NewProgressResponse() *ProgressResponse {
	return &ProgressResponse{}
}

func (p *ProgressResponse) InitDefault() {
}

func (p *ProgressResponse) GetProgress() (v int32) {
	return p.Progress
}

func (p *ProgressResponse) GetStatus() (v string) {
	return p.Status
}

func (p *ProgressResponse) GetMessage() (v string) {
	return p.Message
}
func (p *ProgressResponse) SetProgress(val int32) {
	p.Progress = val
}
func (p *ProgressResponse) SetStatus(val string) {
	p.Status = val
}
func (p *ProgressResponse) SetMessage(val string) {
	p.Message = val
}

func (p *ProgressResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProgressResponse(%+v)", *p)
}

var fieldIDToName_ProgressResponse = map[int16]string{
	1: "progress",
	2: "status",
	3: "message",
}

type TagsRequest struct {
	Keyword string `thrift:"keyword,1" frugal:"1,default,string" json:"keyword"`
	Limit   int32  `thrift:"limit,2" frugal:"2,default,i32" json:"limit"`
}

func NewTagsRequest() *TagsRequest {
	return &TagsRequest{}
}

func (p *TagsRequest) InitDefault() {
}

func (p *TagsRequest) GetKeyword() (v string) {
	return p.Keyword
}

func (p *TagsRequest) GetLimit() (v int32) {
	return p.Limit
}
func (p *TagsRequest) SetKeyword(val string) {
	p.Keyword = val
}
func (p *TagsRequest) SetLimit(val int32) {
	p.Limit = val
}

func (p *TagsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TagsRequest(%+v)", *p)
}

var fieldIDToName_TagsRequest = map[int16]string{
	1: "keyword",
	2: "limit",
}

type TagsResponse struct {
	Tags []*Tag `thrift:"tags,1" frugal:"1,default,list<Tag>" json:"tags"`
}

func NewTagsResponse() *TagsResponse {
	return &TagsResponse{}
}

func (p *TagsResponse) InitDefault() {
}

func (p *TagsResponse) GetTags() (v []*Tag) {
	return p.Tags
}
func (p *TagsResponse) SetTags(val []*Tag) {
	p.Tags = val
}

func (p *TagsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TagsResponse(%+v)", *p)
}

var fieldIDToName_TagsResponse = map[int16]string{
	1: "tags",
}

type UploadService interface {
	UploadVideo(ctx context.Context, req *UploadRequest) (r *UploadResponse, err error)

	UpdateVideoInfo(ctx context.Context, req *UpdateRequest) (r *UpdateResponse, err error)

	GetUploadProgress(ctx context.Context, req *ProgressRequest) (r *ProgressResponse, err error)

	GetRecommendedTags(ctx context.Context, req *TagsRequest) (r *TagsResponse, err error)
}

type UploadServiceUploadVideoArgs struct {
	Req *UploadRequest `thrift:"req,1" frugal:"1,default,UploadRequest" json:"req"`
}

func NewUploadServiceUploadVideoArgs() *UploadServiceUploadVideoArgs {
	return &UploadServiceUploadVideoArgs{}
}

func (p *UploadServiceUploadVideoArgs) InitDefault() {
}

var UploadServiceUploadVideoArgs_Req_DEFAULT *UploadRequest

func (p *UploadServiceUploadVideoArgs) GetReq() (v *UploadRequest) {
	if !p.IsSetReq() {
		return UploadServiceUploadVideoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UploadServiceUploadVideoArgs) SetReq(val *UploadRequest) {
	p.Req = val
}

func (p *UploadServiceUploadVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UploadServiceUploadVideoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadServiceUploadVideoArgs(%+v)", *p)
}

var fieldIDToName_UploadServiceUploadVideoArgs = map[int16]string{
	1: "req",
}

type UploadServiceUploadVideoResult struct {
	Success *UploadResponse `thrift:"success,0,optional" frugal:"0,optional,UploadResponse" json:"success,omitempty"`
}

func NewUploadServiceUploadVideoResult() *UploadServiceUploadVideoResult {
	return &UploadServiceUploadVideoResult{}
}

func (p *UploadServiceUploadVideoResult) InitDefault() {
}

var UploadServiceUploadVideoResult_Success_DEFAULT *UploadResponse

func (p *UploadServiceUploadVideoResult) GetSuccess() (v *UploadResponse) {
	if !p.IsSetSuccess() {
		return UploadServiceUploadVideoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UploadServiceUploadVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*UploadResponse)
}

func (p *UploadServiceUploadVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UploadServiceUploadVideoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadServiceUploadVideoResult(%+v)", *p)
}

var fieldIDToName_UploadServiceUploadVideoResult = map[int16]string{
	0: "success",
}

type UploadServiceUpdateVideoInfoArgs struct {
	Req *UpdateRequest `thrift:"req,1" frugal:"1,default,UpdateRequest" json:"req"`
}

func NewUploadServiceUpdateVideoInfoArgs() *UploadServiceUpdateVideoInfoArgs {
	return &UploadServiceUpdateVideoInfoArgs{}
}

func (p *UploadServiceUpdateVideoInfoArgs) InitDefault() {
}

var UploadServiceUpdateVideoInfoArgs_Req_DEFAULT *UpdateRequest

func (p *UploadServiceUpdateVideoInfoArgs) GetReq() (v *UpdateRequest) {
	if !p.IsSetReq() {
		return UploadServiceUpdateVideoInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UploadServiceUpdateVideoInfoArgs) SetReq(val *UpdateRequest) {
	p.Req = val
}

func (p *UploadServiceUpdateVideoInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UploadServiceUpdateVideoInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadServiceUpdateVideoInfoArgs(%+v)", *p)
}

var fieldIDToName_UploadServiceUpdateVideoInfoArgs = map[int16]string{
	1: "req",
}

type UploadServiceUpdateVideoInfoResult struct {
	Success *UpdateResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateResponse" json:"success,omitempty"`
}

func NewUploadServiceUpdateVideoInfoResult() *UploadServiceUpdateVideoInfoResult {
	return &UploadServiceUpdateVideoInfoResult{}
}

func (p *UploadServiceUpdateVideoInfoResult) InitDefault() {
}

var UploadServiceUpdateVideoInfoResult_Success_DEFAULT *UpdateResponse

func (p *UploadServiceUpdateVideoInfoResult) GetSuccess() (v *UpdateResponse) {
	if !p.IsSetSuccess() {
		return UploadServiceUpdateVideoInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UploadServiceUpdateVideoInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateResponse)
}

func (p *UploadServiceUpdateVideoInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UploadServiceUpdateVideoInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadServiceUpdateVideoInfoResult(%+v)", *p)
}

var fieldIDToName_UploadServiceUpdateVideoInfoResult = map[int16]string{
	0: "success",
}

type UploadServiceGetUploadProgressArgs struct {
	Req *ProgressRequest `thrift:"req,1" frugal:"1,default,ProgressRequest" json:"req"`
}

func NewUploadServiceGetUploadProgressArgs() *UploadServiceGetUploadProgressArgs {
	return &UploadServiceGetUploadProgressArgs{}
}

func (p *UploadServiceGetUploadProgressArgs) InitDefault() {
}

var UploadServiceGetUploadProgressArgs_Req_DEFAULT *ProgressRequest

func (p *UploadServiceGetUploadProgressArgs) GetReq() (v *ProgressRequest) {
	if !p.IsSetReq() {
		return UploadServiceGetUploadProgressArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UploadServiceGetUploadProgressArgs) SetReq(val *ProgressRequest) {
	p.Req = val
}

func (p *UploadServiceGetUploadProgressArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UploadServiceGetUploadProgressArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadServiceGetUploadProgressArgs(%+v)", *p)
}

var fieldIDToName_UploadServiceGetUploadProgressArgs = map[int16]string{
	1: "req",
}

type UploadServiceGetUploadProgressResult struct {
	Success *ProgressResponse `thrift:"success,0,optional" frugal:"0,optional,ProgressResponse" json:"success,omitempty"`
}

func NewUploadServiceGetUploadProgressResult() *UploadServiceGetUploadProgressResult {
	return &UploadServiceGetUploadProgressResult{}
}

func (p *UploadServiceGetUploadProgressResult) InitDefault() {
}

var UploadServiceGetUploadProgressResult_Success_DEFAULT *ProgressResponse

func (p *UploadServiceGetUploadProgressResult) GetSuccess() (v *ProgressResponse) {
	if !p.IsSetSuccess() {
		return UploadServiceGetUploadProgressResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UploadServiceGetUploadProgressResult) SetSuccess(x interface{}) {
	p.Success = x.(*ProgressResponse)
}

func (p *UploadServiceGetUploadProgressResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UploadServiceGetUploadProgressResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadServiceGetUploadProgressResult(%+v)", *p)
}

var fieldIDToName_UploadServiceGetUploadProgressResult = map[int16]string{
	0: "success",
}

type UploadServiceGetRecommendedTagsArgs struct {
	Req *TagsRequest `thrift:"req,1" frugal:"1,default,TagsRequest" json:"req"`
}

func NewUploadServiceGetRecommendedTagsArgs() *UploadServiceGetRecommendedTagsArgs {
	return &UploadServiceGetRecommendedTagsArgs{}
}

func (p *UploadServiceGetRecommendedTagsArgs) InitDefault() {
}

var UploadServiceGetRecommendedTagsArgs_Req_DEFAULT *TagsRequest

func (p *UploadServiceGetRecommendedTagsArgs) GetReq() (v *TagsRequest) {
	if !p.IsSetReq() {
		return UploadServiceGetRecommendedTagsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UploadServiceGetRecommendedTagsArgs) SetReq(val *TagsRequest) {
	p.Req = val
}

func (p *UploadServiceGetRecommendedTagsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UploadServiceGetRecommendedTagsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadServiceGetRecommendedTagsArgs(%+v)", *p)
}

var fieldIDToName_UploadServiceGetRecommendedTagsArgs = map[int16]string{
	1: "req",
}

type UploadServiceGetRecommendedTagsResult struct {
	Success *TagsResponse `thrift:"success,0,optional" frugal:"0,optional,TagsResponse" json:"success,omitempty"`
}

func NewUploadServiceGetRecommendedTagsResult() *UploadServiceGetRecommendedTagsResult {
	return &UploadServiceGetRecommendedTagsResult{}
}

func (p *UploadServiceGetRecommendedTagsResult) InitDefault() {
}

var UploadServiceGetRecommendedTagsResult_Success_DEFAULT *TagsResponse

func (p *UploadServiceGetRecommendedTagsResult) GetSuccess() (v *TagsResponse) {
	if !p.IsSetSuccess() {
		return UploadServiceGetRecommendedTagsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UploadServiceGetRecommendedTagsResult) SetSuccess(x interface{}) {
	p.Success = x.(*TagsResponse)
}

func (p *UploadServiceGetRecommendedTagsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UploadServiceGetRecommendedTagsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadServiceGetRecommendedTagsResult(%+v)", *p)
}

var fieldIDToName_UploadServiceGetRecommendedTagsResult = map[int16]string{
	0: "success",
}
