// Code generated by Kitex v0.13.1. DO NOT EDIT.

package interactionservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	interaction "video_douyin/kitex_gen/interaction"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Follow": kitex.NewMethodInfo(
		followHandler,
		newInteractionServiceFollowArgs,
		newInteractionServiceFollowResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Unfollow": kitex.NewMethodInfo(
		unfollowHandler,
		newInteractionServiceUnfollowArgs,
		newInteractionServiceUnfollowResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Comment": kitex.NewMethodInfo(
		commentHandler,
		newInteractionServiceCommentArgs,
		newInteractionServiceCommentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetComments": kitex.NewMethodInfo(
		getCommentsHandler,
		newInteractionServiceGetCommentsArgs,
		newInteractionServiceGetCommentsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Like": kitex.NewMethodInfo(
		likeHandler,
		newInteractionServiceLikeArgs,
		newInteractionServiceLikeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Unlike": kitex.NewMethodInfo(
		unlikeHandler,
		newInteractionServiceUnlikeArgs,
		newInteractionServiceUnlikeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Favorite": kitex.NewMethodInfo(
		favoriteHandler,
		newInteractionServiceFavoriteArgs,
		newInteractionServiceFavoriteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Unfavorite": kitex.NewMethodInfo(
		unfavoriteHandler,
		newInteractionServiceUnfavoriteArgs,
		newInteractionServiceUnfavoriteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SendDanmaku": kitex.NewMethodInfo(
		sendDanmakuHandler,
		newInteractionServiceSendDanmakuArgs,
		newInteractionServiceSendDanmakuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetDanmaku": kitex.NewMethodInfo(
		getDanmakuHandler,
		newInteractionServiceGetDanmakuArgs,
		newInteractionServiceGetDanmakuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Share": kitex.NewMethodInfo(
		shareHandler,
		newInteractionServiceShareArgs,
		newInteractionServiceShareResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	interactionServiceServiceInfo                = NewServiceInfo()
	interactionServiceServiceInfoForClient       = NewServiceInfoForClient()
	interactionServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return interactionServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return interactionServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return interactionServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "InteractionService"
	handlerType := (*interaction.InteractionService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "interaction",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func followHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceFollowArgs)
	realResult := result.(*interaction.InteractionServiceFollowResult)
	success, err := handler.(interaction.InteractionService).Follow(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceFollowArgs() interface{} {
	return interaction.NewInteractionServiceFollowArgs()
}

func newInteractionServiceFollowResult() interface{} {
	return interaction.NewInteractionServiceFollowResult()
}

func unfollowHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceUnfollowArgs)
	realResult := result.(*interaction.InteractionServiceUnfollowResult)
	success, err := handler.(interaction.InteractionService).Unfollow(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceUnfollowArgs() interface{} {
	return interaction.NewInteractionServiceUnfollowArgs()
}

func newInteractionServiceUnfollowResult() interface{} {
	return interaction.NewInteractionServiceUnfollowResult()
}

func commentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceCommentArgs)
	realResult := result.(*interaction.InteractionServiceCommentResult)
	success, err := handler.(interaction.InteractionService).Comment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceCommentArgs() interface{} {
	return interaction.NewInteractionServiceCommentArgs()
}

func newInteractionServiceCommentResult() interface{} {
	return interaction.NewInteractionServiceCommentResult()
}

func getCommentsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceGetCommentsArgs)
	realResult := result.(*interaction.InteractionServiceGetCommentsResult)
	success, err := handler.(interaction.InteractionService).GetComments(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceGetCommentsArgs() interface{} {
	return interaction.NewInteractionServiceGetCommentsArgs()
}

func newInteractionServiceGetCommentsResult() interface{} {
	return interaction.NewInteractionServiceGetCommentsResult()
}

func likeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceLikeArgs)
	realResult := result.(*interaction.InteractionServiceLikeResult)
	success, err := handler.(interaction.InteractionService).Like(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceLikeArgs() interface{} {
	return interaction.NewInteractionServiceLikeArgs()
}

func newInteractionServiceLikeResult() interface{} {
	return interaction.NewInteractionServiceLikeResult()
}

func unlikeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceUnlikeArgs)
	realResult := result.(*interaction.InteractionServiceUnlikeResult)
	success, err := handler.(interaction.InteractionService).Unlike(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceUnlikeArgs() interface{} {
	return interaction.NewInteractionServiceUnlikeArgs()
}

func newInteractionServiceUnlikeResult() interface{} {
	return interaction.NewInteractionServiceUnlikeResult()
}

func favoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceFavoriteArgs)
	realResult := result.(*interaction.InteractionServiceFavoriteResult)
	success, err := handler.(interaction.InteractionService).Favorite(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceFavoriteArgs() interface{} {
	return interaction.NewInteractionServiceFavoriteArgs()
}

func newInteractionServiceFavoriteResult() interface{} {
	return interaction.NewInteractionServiceFavoriteResult()
}

func unfavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceUnfavoriteArgs)
	realResult := result.(*interaction.InteractionServiceUnfavoriteResult)
	success, err := handler.(interaction.InteractionService).Unfavorite(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceUnfavoriteArgs() interface{} {
	return interaction.NewInteractionServiceUnfavoriteArgs()
}

func newInteractionServiceUnfavoriteResult() interface{} {
	return interaction.NewInteractionServiceUnfavoriteResult()
}

func sendDanmakuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceSendDanmakuArgs)
	realResult := result.(*interaction.InteractionServiceSendDanmakuResult)
	success, err := handler.(interaction.InteractionService).SendDanmaku(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceSendDanmakuArgs() interface{} {
	return interaction.NewInteractionServiceSendDanmakuArgs()
}

func newInteractionServiceSendDanmakuResult() interface{} {
	return interaction.NewInteractionServiceSendDanmakuResult()
}

func getDanmakuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceGetDanmakuArgs)
	realResult := result.(*interaction.InteractionServiceGetDanmakuResult)
	success, err := handler.(interaction.InteractionService).GetDanmaku(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceGetDanmakuArgs() interface{} {
	return interaction.NewInteractionServiceGetDanmakuArgs()
}

func newInteractionServiceGetDanmakuResult() interface{} {
	return interaction.NewInteractionServiceGetDanmakuResult()
}

func shareHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceShareArgs)
	realResult := result.(*interaction.InteractionServiceShareResult)
	success, err := handler.(interaction.InteractionService).Share(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceShareArgs() interface{} {
	return interaction.NewInteractionServiceShareArgs()
}

func newInteractionServiceShareResult() interface{} {
	return interaction.NewInteractionServiceShareResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Follow(ctx context.Context, req *interaction.FollowRequest) (r *interaction.FollowResponse, err error) {
	var _args interaction.InteractionServiceFollowArgs
	_args.Req = req
	var _result interaction.InteractionServiceFollowResult
	if err = p.c.Call(ctx, "Follow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Unfollow(ctx context.Context, req *interaction.FollowRequest) (r *interaction.FollowResponse, err error) {
	var _args interaction.InteractionServiceUnfollowArgs
	_args.Req = req
	var _result interaction.InteractionServiceUnfollowResult
	if err = p.c.Call(ctx, "Unfollow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Comment(ctx context.Context, req *interaction.CommentRequest) (r *interaction.CommentResponse, err error) {
	var _args interaction.InteractionServiceCommentArgs
	_args.Req = req
	var _result interaction.InteractionServiceCommentResult
	if err = p.c.Call(ctx, "Comment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetComments(ctx context.Context, req *interaction.GetCommentsRequest) (r *interaction.GetCommentsResponse, err error) {
	var _args interaction.InteractionServiceGetCommentsArgs
	_args.Req = req
	var _result interaction.InteractionServiceGetCommentsResult
	if err = p.c.Call(ctx, "GetComments", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Like(ctx context.Context, req *interaction.LikeRequest) (r *interaction.LikeResponse, err error) {
	var _args interaction.InteractionServiceLikeArgs
	_args.Req = req
	var _result interaction.InteractionServiceLikeResult
	if err = p.c.Call(ctx, "Like", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Unlike(ctx context.Context, req *interaction.LikeRequest) (r *interaction.LikeResponse, err error) {
	var _args interaction.InteractionServiceUnlikeArgs
	_args.Req = req
	var _result interaction.InteractionServiceUnlikeResult
	if err = p.c.Call(ctx, "Unlike", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Favorite(ctx context.Context, req *interaction.FavoriteRequest) (r *interaction.FavoriteResponse, err error) {
	var _args interaction.InteractionServiceFavoriteArgs
	_args.Req = req
	var _result interaction.InteractionServiceFavoriteResult
	if err = p.c.Call(ctx, "Favorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Unfavorite(ctx context.Context, req *interaction.FavoriteRequest) (r *interaction.FavoriteResponse, err error) {
	var _args interaction.InteractionServiceUnfavoriteArgs
	_args.Req = req
	var _result interaction.InteractionServiceUnfavoriteResult
	if err = p.c.Call(ctx, "Unfavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SendDanmaku(ctx context.Context, req *interaction.DanmakuRequest) (r *interaction.DanmakuResponse, err error) {
	var _args interaction.InteractionServiceSendDanmakuArgs
	_args.Req = req
	var _result interaction.InteractionServiceSendDanmakuResult
	if err = p.c.Call(ctx, "SendDanmaku", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetDanmaku(ctx context.Context, req *interaction.GetDanmakuRequest) (r *interaction.GetDanmakuResponse, err error) {
	var _args interaction.InteractionServiceGetDanmakuArgs
	_args.Req = req
	var _result interaction.InteractionServiceGetDanmakuResult
	if err = p.c.Call(ctx, "GetDanmaku", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Share(ctx context.Context, req *interaction.ShareRequest) (r *interaction.ShareResponse, err error) {
	var _args interaction.InteractionServiceShareArgs
	_args.Req = req
	var _result interaction.InteractionServiceShareResult
	if err = p.c.Call(ctx, "Share", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
