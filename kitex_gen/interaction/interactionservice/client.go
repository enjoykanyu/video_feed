// Code generated by Kitex v0.13.1. DO NOT EDIT.

package interactionservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	interaction "video_douyin/kitex_gen/interaction"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Follow(ctx context.Context, req *interaction.FollowRequest, callOptions ...callopt.Option) (r *interaction.FollowResponse, err error)
	Unfollow(ctx context.Context, req *interaction.FollowRequest, callOptions ...callopt.Option) (r *interaction.FollowResponse, err error)
	Comment(ctx context.Context, req *interaction.CommentRequest, callOptions ...callopt.Option) (r *interaction.CommentResponse, err error)
	GetComments(ctx context.Context, req *interaction.GetCommentsRequest, callOptions ...callopt.Option) (r *interaction.GetCommentsResponse, err error)
	Like(ctx context.Context, req *interaction.LikeRequest, callOptions ...callopt.Option) (r *interaction.LikeResponse, err error)
	Unlike(ctx context.Context, req *interaction.LikeRequest, callOptions ...callopt.Option) (r *interaction.LikeResponse, err error)
	Favorite(ctx context.Context, req *interaction.FavoriteRequest, callOptions ...callopt.Option) (r *interaction.FavoriteResponse, err error)
	Unfavorite(ctx context.Context, req *interaction.FavoriteRequest, callOptions ...callopt.Option) (r *interaction.FavoriteResponse, err error)
	SendDanmaku(ctx context.Context, req *interaction.DanmakuRequest, callOptions ...callopt.Option) (r *interaction.DanmakuResponse, err error)
	GetDanmaku(ctx context.Context, req *interaction.GetDanmakuRequest, callOptions ...callopt.Option) (r *interaction.GetDanmakuResponse, err error)
	Share(ctx context.Context, req *interaction.ShareRequest, callOptions ...callopt.Option) (r *interaction.ShareResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kInteractionServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kInteractionServiceClient struct {
	*kClient
}

func (p *kInteractionServiceClient) Follow(ctx context.Context, req *interaction.FollowRequest, callOptions ...callopt.Option) (r *interaction.FollowResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Follow(ctx, req)
}

func (p *kInteractionServiceClient) Unfollow(ctx context.Context, req *interaction.FollowRequest, callOptions ...callopt.Option) (r *interaction.FollowResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Unfollow(ctx, req)
}

func (p *kInteractionServiceClient) Comment(ctx context.Context, req *interaction.CommentRequest, callOptions ...callopt.Option) (r *interaction.CommentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Comment(ctx, req)
}

func (p *kInteractionServiceClient) GetComments(ctx context.Context, req *interaction.GetCommentsRequest, callOptions ...callopt.Option) (r *interaction.GetCommentsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetComments(ctx, req)
}

func (p *kInteractionServiceClient) Like(ctx context.Context, req *interaction.LikeRequest, callOptions ...callopt.Option) (r *interaction.LikeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Like(ctx, req)
}

func (p *kInteractionServiceClient) Unlike(ctx context.Context, req *interaction.LikeRequest, callOptions ...callopt.Option) (r *interaction.LikeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Unlike(ctx, req)
}

func (p *kInteractionServiceClient) Favorite(ctx context.Context, req *interaction.FavoriteRequest, callOptions ...callopt.Option) (r *interaction.FavoriteResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Favorite(ctx, req)
}

func (p *kInteractionServiceClient) Unfavorite(ctx context.Context, req *interaction.FavoriteRequest, callOptions ...callopt.Option) (r *interaction.FavoriteResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Unfavorite(ctx, req)
}

func (p *kInteractionServiceClient) SendDanmaku(ctx context.Context, req *interaction.DanmakuRequest, callOptions ...callopt.Option) (r *interaction.DanmakuResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SendDanmaku(ctx, req)
}

func (p *kInteractionServiceClient) GetDanmaku(ctx context.Context, req *interaction.GetDanmakuRequest, callOptions ...callopt.Option) (r *interaction.GetDanmakuResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetDanmaku(ctx, req)
}

func (p *kInteractionServiceClient) Share(ctx context.Context, req *interaction.ShareRequest, callOptions ...callopt.Option) (r *interaction.ShareResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Share(ctx, req)
}
