// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package interaction

import (
	"context"
	"fmt"
)

type Comment struct {
	Id        int64  `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	UserId    int64  `thrift:"user_id,2" frugal:"2,default,i64" json:"user_id"`
	VideoId   int64  `thrift:"video_id,3" frugal:"3,default,i64" json:"video_id"`
	Content   string `thrift:"content,4" frugal:"4,default,string" json:"content"`
	CreatedAt int64  `thrift:"created_at,5" frugal:"5,default,i64" json:"created_at"`
}

func NewComment() *Comment {
	return &Comment{}
}

func (p *Comment) InitDefault() {
}

func (p *Comment) GetId() (v int64) {
	return p.Id
}

func (p *Comment) GetUserId() (v int64) {
	return p.UserId
}

func (p *Comment) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *Comment) GetContent() (v string) {
	return p.Content
}

func (p *Comment) GetCreatedAt() (v int64) {
	return p.CreatedAt
}
func (p *Comment) SetId(val int64) {
	p.Id = val
}
func (p *Comment) SetUserId(val int64) {
	p.UserId = val
}
func (p *Comment) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *Comment) SetContent(val string) {
	p.Content = val
}
func (p *Comment) SetCreatedAt(val int64) {
	p.CreatedAt = val
}

func (p *Comment) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Comment(%+v)", *p)
}

var fieldIDToName_Comment = map[int16]string{
	1: "id",
	2: "user_id",
	3: "video_id",
	4: "content",
	5: "created_at",
}

type Danmaku struct {
	Id        int64  `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	UserId    int64  `thrift:"user_id,2" frugal:"2,default,i64" json:"user_id"`
	VideoId   int64  `thrift:"video_id,3" frugal:"3,default,i64" json:"video_id"`
	Content   string `thrift:"content,4" frugal:"4,default,string" json:"content"`
	Position  int32  `thrift:"position,5" frugal:"5,default,i32" json:"position"`
	Color     string `thrift:"color,6" frugal:"6,default,string" json:"color"`
	CreatedAt int64  `thrift:"created_at,7" frugal:"7,default,i64" json:"created_at"`
}

func NewDanmaku() *Danmaku {
	return &Danmaku{}
}

func (p *Danmaku) InitDefault() {
}

func (p *Danmaku) GetId() (v int64) {
	return p.Id
}

func (p *Danmaku) GetUserId() (v int64) {
	return p.UserId
}

func (p *Danmaku) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *Danmaku) GetContent() (v string) {
	return p.Content
}

func (p *Danmaku) GetPosition() (v int32) {
	return p.Position
}

func (p *Danmaku) GetColor() (v string) {
	return p.Color
}

func (p *Danmaku) GetCreatedAt() (v int64) {
	return p.CreatedAt
}
func (p *Danmaku) SetId(val int64) {
	p.Id = val
}
func (p *Danmaku) SetUserId(val int64) {
	p.UserId = val
}
func (p *Danmaku) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *Danmaku) SetContent(val string) {
	p.Content = val
}
func (p *Danmaku) SetPosition(val int32) {
	p.Position = val
}
func (p *Danmaku) SetColor(val string) {
	p.Color = val
}
func (p *Danmaku) SetCreatedAt(val int64) {
	p.CreatedAt = val
}

func (p *Danmaku) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Danmaku(%+v)", *p)
}

var fieldIDToName_Danmaku = map[int16]string{
	1: "id",
	2: "user_id",
	3: "video_id",
	4: "content",
	5: "position",
	6: "color",
	7: "created_at",
}

type FollowRequest struct {
	UserId   int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	TargetId int64 `thrift:"target_id,2" frugal:"2,default,i64" json:"target_id"`
}

func NewFollowRequest() *FollowRequest {
	return &FollowRequest{}
}

func (p *FollowRequest) InitDefault() {
}

func (p *FollowRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *FollowRequest) GetTargetId() (v int64) {
	return p.TargetId
}
func (p *FollowRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *FollowRequest) SetTargetId(val int64) {
	p.TargetId = val
}

func (p *FollowRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowRequest(%+v)", *p)
}

var fieldIDToName_FollowRequest = map[int16]string{
	1: "user_id",
	2: "target_id",
}

type FollowResponse struct {
	Success bool   `thrift:"success,1" frugal:"1,default,bool" json:"success"`
	Message string `thrift:"message,2" frugal:"2,default,string" json:"message"`
}

func NewFollowResponse() *FollowResponse {
	return &FollowResponse{}
}

func (p *FollowResponse) InitDefault() {
}

func (p *FollowResponse) GetSuccess() (v bool) {
	return p.Success
}

func (p *FollowResponse) GetMessage() (v string) {
	return p.Message
}
func (p *FollowResponse) SetSuccess(val bool) {
	p.Success = val
}
func (p *FollowResponse) SetMessage(val string) {
	p.Message = val
}

func (p *FollowResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowResponse(%+v)", *p)
}

var fieldIDToName_FollowResponse = map[int16]string{
	1: "success",
	2: "message",
}

type CommentRequest struct {
	UserId  int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	VideoId int64  `thrift:"video_id,2" frugal:"2,default,i64" json:"video_id"`
	Content string `thrift:"content,3" frugal:"3,default,string" json:"content"`
}

func NewCommentRequest() *CommentRequest {
	return &CommentRequest{}
}

func (p *CommentRequest) InitDefault() {
}

func (p *CommentRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *CommentRequest) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *CommentRequest) GetContent() (v string) {
	return p.Content
}
func (p *CommentRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *CommentRequest) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *CommentRequest) SetContent(val string) {
	p.Content = val
}

func (p *CommentRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentRequest(%+v)", *p)
}

var fieldIDToName_CommentRequest = map[int16]string{
	1: "user_id",
	2: "video_id",
	3: "content",
}

type CommentResponse struct {
	Success bool     `thrift:"success,1" frugal:"1,default,bool" json:"success"`
	Message string   `thrift:"message,2" frugal:"2,default,string" json:"message"`
	Comment *Comment `thrift:"comment,3" frugal:"3,default,Comment" json:"comment"`
}

func NewCommentResponse() *CommentResponse {
	return &CommentResponse{}
}

func (p *CommentResponse) InitDefault() {
}

func (p *CommentResponse) GetSuccess() (v bool) {
	return p.Success
}

func (p *CommentResponse) GetMessage() (v string) {
	return p.Message
}

var CommentResponse_Comment_DEFAULT *Comment

func (p *CommentResponse) GetComment() (v *Comment) {
	if !p.IsSetComment() {
		return CommentResponse_Comment_DEFAULT
	}
	return p.Comment
}
func (p *CommentResponse) SetSuccess(val bool) {
	p.Success = val
}
func (p *CommentResponse) SetMessage(val string) {
	p.Message = val
}
func (p *CommentResponse) SetComment(val *Comment) {
	p.Comment = val
}

func (p *CommentResponse) IsSetComment() bool {
	return p.Comment != nil
}

func (p *CommentResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentResponse(%+v)", *p)
}

var fieldIDToName_CommentResponse = map[int16]string{
	1: "success",
	2: "message",
	3: "comment",
}

type GetCommentsRequest struct {
	VideoId  int64 `thrift:"video_id,1" frugal:"1,default,i64" json:"video_id"`
	Page     int32 `thrift:"page,2" frugal:"2,default,i32" json:"page"`
	PageSize int32 `thrift:"page_size,3" frugal:"3,default,i32" json:"page_size"`
}

func NewGetCommentsRequest() *GetCommentsRequest {
	return &GetCommentsRequest{}
}

func (p *GetCommentsRequest) InitDefault() {
}

func (p *GetCommentsRequest) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *GetCommentsRequest) GetPage() (v int32) {
	return p.Page
}

func (p *GetCommentsRequest) GetPageSize() (v int32) {
	return p.PageSize
}
func (p *GetCommentsRequest) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *GetCommentsRequest) SetPage(val int32) {
	p.Page = val
}
func (p *GetCommentsRequest) SetPageSize(val int32) {
	p.PageSize = val
}

func (p *GetCommentsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCommentsRequest(%+v)", *p)
}

var fieldIDToName_GetCommentsRequest = map[int16]string{
	1: "video_id",
	2: "page",
	3: "page_size",
}

type GetCommentsResponse struct {
	Comments []*Comment `thrift:"comments,1" frugal:"1,default,list<Comment>" json:"comments"`
	Total    int32      `thrift:"total,2" frugal:"2,default,i32" json:"total"`
}

func NewGetCommentsResponse() *GetCommentsResponse {
	return &GetCommentsResponse{}
}

func (p *GetCommentsResponse) InitDefault() {
}

func (p *GetCommentsResponse) GetComments() (v []*Comment) {
	return p.Comments
}

func (p *GetCommentsResponse) GetTotal() (v int32) {
	return p.Total
}
func (p *GetCommentsResponse) SetComments(val []*Comment) {
	p.Comments = val
}
func (p *GetCommentsResponse) SetTotal(val int32) {
	p.Total = val
}

func (p *GetCommentsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCommentsResponse(%+v)", *p)
}

var fieldIDToName_GetCommentsResponse = map[int16]string{
	1: "comments",
	2: "total",
}

type LikeRequest struct {
	UserId  int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	VideoId int64 `thrift:"video_id,2" frugal:"2,default,i64" json:"video_id"`
}

func NewLikeRequest() *LikeRequest {
	return &LikeRequest{}
}

func (p *LikeRequest) InitDefault() {
}

func (p *LikeRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *LikeRequest) GetVideoId() (v int64) {
	return p.VideoId
}
func (p *LikeRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *LikeRequest) SetVideoId(val int64) {
	p.VideoId = val
}

func (p *LikeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeRequest(%+v)", *p)
}

var fieldIDToName_LikeRequest = map[int16]string{
	1: "user_id",
	2: "video_id",
}

type LikeResponse struct {
	Success bool   `thrift:"success,1" frugal:"1,default,bool" json:"success"`
	Message string `thrift:"message,2" frugal:"2,default,string" json:"message"`
}

func NewLikeResponse() *LikeResponse {
	return &LikeResponse{}
}

func (p *LikeResponse) InitDefault() {
}

func (p *LikeResponse) GetSuccess() (v bool) {
	return p.Success
}

func (p *LikeResponse) GetMessage() (v string) {
	return p.Message
}
func (p *LikeResponse) SetSuccess(val bool) {
	p.Success = val
}
func (p *LikeResponse) SetMessage(val string) {
	p.Message = val
}

func (p *LikeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeResponse(%+v)", *p)
}

var fieldIDToName_LikeResponse = map[int16]string{
	1: "success",
	2: "message",
}

type FavoriteRequest struct {
	UserId  int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	VideoId int64 `thrift:"video_id,2" frugal:"2,default,i64" json:"video_id"`
}

func NewFavoriteRequest() *FavoriteRequest {
	return &FavoriteRequest{}
}

func (p *FavoriteRequest) InitDefault() {
}

func (p *FavoriteRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *FavoriteRequest) GetVideoId() (v int64) {
	return p.VideoId
}
func (p *FavoriteRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *FavoriteRequest) SetVideoId(val int64) {
	p.VideoId = val
}

func (p *FavoriteRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FavoriteRequest(%+v)", *p)
}

var fieldIDToName_FavoriteRequest = map[int16]string{
	1: "user_id",
	2: "video_id",
}

type FavoriteResponse struct {
	Success bool   `thrift:"success,1" frugal:"1,default,bool" json:"success"`
	Message string `thrift:"message,2" frugal:"2,default,string" json:"message"`
}

func NewFavoriteResponse() *FavoriteResponse {
	return &FavoriteResponse{}
}

func (p *FavoriteResponse) InitDefault() {
}

func (p *FavoriteResponse) GetSuccess() (v bool) {
	return p.Success
}

func (p *FavoriteResponse) GetMessage() (v string) {
	return p.Message
}
func (p *FavoriteResponse) SetSuccess(val bool) {
	p.Success = val
}
func (p *FavoriteResponse) SetMessage(val string) {
	p.Message = val
}

func (p *FavoriteResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FavoriteResponse(%+v)", *p)
}

var fieldIDToName_FavoriteResponse = map[int16]string{
	1: "success",
	2: "message",
}

type DanmakuRequest struct {
	UserId   int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	VideoId  int64  `thrift:"video_id,2" frugal:"2,default,i64" json:"video_id"`
	Content  string `thrift:"content,3" frugal:"3,default,string" json:"content"`
	Position int32  `thrift:"position,4" frugal:"4,default,i32" json:"position"`
	Color    string `thrift:"color,5" frugal:"5,default,string" json:"color"`
}

func NewDanmakuRequest() *DanmakuRequest {
	return &DanmakuRequest{}
}

func (p *DanmakuRequest) InitDefault() {
}

func (p *DanmakuRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *DanmakuRequest) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *DanmakuRequest) GetContent() (v string) {
	return p.Content
}

func (p *DanmakuRequest) GetPosition() (v int32) {
	return p.Position
}

func (p *DanmakuRequest) GetColor() (v string) {
	return p.Color
}
func (p *DanmakuRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *DanmakuRequest) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *DanmakuRequest) SetContent(val string) {
	p.Content = val
}
func (p *DanmakuRequest) SetPosition(val int32) {
	p.Position = val
}
func (p *DanmakuRequest) SetColor(val string) {
	p.Color = val
}

func (p *DanmakuRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DanmakuRequest(%+v)", *p)
}

var fieldIDToName_DanmakuRequest = map[int16]string{
	1: "user_id",
	2: "video_id",
	3: "content",
	4: "position",
	5: "color",
}

type DanmakuResponse struct {
	Success bool   `thrift:"success,1" frugal:"1,default,bool" json:"success"`
	Message string `thrift:"message,2" frugal:"2,default,string" json:"message"`
}

func NewDanmakuResponse() *DanmakuResponse {
	return &DanmakuResponse{}
}

func (p *DanmakuResponse) InitDefault() {
}

func (p *DanmakuResponse) GetSuccess() (v bool) {
	return p.Success
}

func (p *DanmakuResponse) GetMessage() (v string) {
	return p.Message
}
func (p *DanmakuResponse) SetSuccess(val bool) {
	p.Success = val
}
func (p *DanmakuResponse) SetMessage(val string) {
	p.Message = val
}

func (p *DanmakuResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DanmakuResponse(%+v)", *p)
}

var fieldIDToName_DanmakuResponse = map[int16]string{
	1: "success",
	2: "message",
}

type GetDanmakuRequest struct {
	VideoId   int64 `thrift:"video_id,1" frugal:"1,default,i64" json:"video_id"`
	StartTime int32 `thrift:"start_time,2" frugal:"2,default,i32" json:"start_time"`
	EndTime   int32 `thrift:"end_time,3" frugal:"3,default,i32" json:"end_time"`
}

func NewGetDanmakuRequest() *GetDanmakuRequest {
	return &GetDanmakuRequest{}
}

func (p *GetDanmakuRequest) InitDefault() {
}

func (p *GetDanmakuRequest) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *GetDanmakuRequest) GetStartTime() (v int32) {
	return p.StartTime
}

func (p *GetDanmakuRequest) GetEndTime() (v int32) {
	return p.EndTime
}
func (p *GetDanmakuRequest) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *GetDanmakuRequest) SetStartTime(val int32) {
	p.StartTime = val
}
func (p *GetDanmakuRequest) SetEndTime(val int32) {
	p.EndTime = val
}

func (p *GetDanmakuRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDanmakuRequest(%+v)", *p)
}

var fieldIDToName_GetDanmakuRequest = map[int16]string{
	1: "video_id",
	2: "start_time",
	3: "end_time",
}

type GetDanmakuResponse struct {
	DanmakuList []*Danmaku `thrift:"danmaku_list,1" frugal:"1,default,list<Danmaku>" json:"danmaku_list"`
}

func NewGetDanmakuResponse() *GetDanmakuResponse {
	return &GetDanmakuResponse{}
}

func (p *GetDanmakuResponse) InitDefault() {
}

func (p *GetDanmakuResponse) GetDanmakuList() (v []*Danmaku) {
	return p.DanmakuList
}
func (p *GetDanmakuResponse) SetDanmakuList(val []*Danmaku) {
	p.DanmakuList = val
}

func (p *GetDanmakuResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDanmakuResponse(%+v)", *p)
}

var fieldIDToName_GetDanmakuResponse = map[int16]string{
	1: "danmaku_list",
}

type ShareRequest struct {
	UserId   int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	VideoId  int64  `thrift:"video_id,2" frugal:"2,default,i64" json:"video_id"`
	Platform string `thrift:"platform,3" frugal:"3,default,string" json:"platform"`
}

func NewShareRequest() *ShareRequest {
	return &ShareRequest{}
}

func (p *ShareRequest) InitDefault() {
}

func (p *ShareRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *ShareRequest) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *ShareRequest) GetPlatform() (v string) {
	return p.Platform
}
func (p *ShareRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *ShareRequest) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *ShareRequest) SetPlatform(val string) {
	p.Platform = val
}

func (p *ShareRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShareRequest(%+v)", *p)
}

var fieldIDToName_ShareRequest = map[int16]string{
	1: "user_id",
	2: "video_id",
	3: "platform",
}

type ShareResponse struct {
	Success  bool   `thrift:"success,1" frugal:"1,default,bool" json:"success"`
	ShareUrl string `thrift:"share_url,2" frugal:"2,default,string" json:"share_url"`
	Message  string `thrift:"message,3" frugal:"3,default,string" json:"message"`
}

func NewShareResponse() *ShareResponse {
	return &ShareResponse{}
}

func (p *ShareResponse) InitDefault() {
}

func (p *ShareResponse) GetSuccess() (v bool) {
	return p.Success
}

func (p *ShareResponse) GetShareUrl() (v string) {
	return p.ShareUrl
}

func (p *ShareResponse) GetMessage() (v string) {
	return p.Message
}
func (p *ShareResponse) SetSuccess(val bool) {
	p.Success = val
}
func (p *ShareResponse) SetShareUrl(val string) {
	p.ShareUrl = val
}
func (p *ShareResponse) SetMessage(val string) {
	p.Message = val
}

func (p *ShareResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShareResponse(%+v)", *p)
}

var fieldIDToName_ShareResponse = map[int16]string{
	1: "success",
	2: "share_url",
	3: "message",
}

type InteractionService interface {
	Follow(ctx context.Context, req *FollowRequest) (r *FollowResponse, err error)

	Unfollow(ctx context.Context, req *FollowRequest) (r *FollowResponse, err error)

	Comment(ctx context.Context, req *CommentRequest) (r *CommentResponse, err error)

	GetComments(ctx context.Context, req *GetCommentsRequest) (r *GetCommentsResponse, err error)

	Like(ctx context.Context, req *LikeRequest) (r *LikeResponse, err error)

	Unlike(ctx context.Context, req *LikeRequest) (r *LikeResponse, err error)

	Favorite(ctx context.Context, req *FavoriteRequest) (r *FavoriteResponse, err error)

	Unfavorite(ctx context.Context, req *FavoriteRequest) (r *FavoriteResponse, err error)

	SendDanmaku(ctx context.Context, req *DanmakuRequest) (r *DanmakuResponse, err error)

	GetDanmaku(ctx context.Context, req *GetDanmakuRequest) (r *GetDanmakuResponse, err error)

	Share(ctx context.Context, req *ShareRequest) (r *ShareResponse, err error)
}

type InteractionServiceFollowArgs struct {
	Req *FollowRequest `thrift:"req,1" frugal:"1,default,FollowRequest" json:"req"`
}

func NewInteractionServiceFollowArgs() *InteractionServiceFollowArgs {
	return &InteractionServiceFollowArgs{}
}

func (p *InteractionServiceFollowArgs) InitDefault() {
}

var InteractionServiceFollowArgs_Req_DEFAULT *FollowRequest

func (p *InteractionServiceFollowArgs) GetReq() (v *FollowRequest) {
	if !p.IsSetReq() {
		return InteractionServiceFollowArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceFollowArgs) SetReq(val *FollowRequest) {
	p.Req = val
}

func (p *InteractionServiceFollowArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceFollowArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceFollowArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceFollowArgs = map[int16]string{
	1: "req",
}

type InteractionServiceFollowResult struct {
	Success *FollowResponse `thrift:"success,0,optional" frugal:"0,optional,FollowResponse" json:"success,omitempty"`
}

func NewInteractionServiceFollowResult() *InteractionServiceFollowResult {
	return &InteractionServiceFollowResult{}
}

func (p *InteractionServiceFollowResult) InitDefault() {
}

var InteractionServiceFollowResult_Success_DEFAULT *FollowResponse

func (p *InteractionServiceFollowResult) GetSuccess() (v *FollowResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceFollowResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceFollowResult) SetSuccess(x interface{}) {
	p.Success = x.(*FollowResponse)
}

func (p *InteractionServiceFollowResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceFollowResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceFollowResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceFollowResult = map[int16]string{
	0: "success",
}

type InteractionServiceUnfollowArgs struct {
	Req *FollowRequest `thrift:"req,1" frugal:"1,default,FollowRequest" json:"req"`
}

func NewInteractionServiceUnfollowArgs() *InteractionServiceUnfollowArgs {
	return &InteractionServiceUnfollowArgs{}
}

func (p *InteractionServiceUnfollowArgs) InitDefault() {
}

var InteractionServiceUnfollowArgs_Req_DEFAULT *FollowRequest

func (p *InteractionServiceUnfollowArgs) GetReq() (v *FollowRequest) {
	if !p.IsSetReq() {
		return InteractionServiceUnfollowArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceUnfollowArgs) SetReq(val *FollowRequest) {
	p.Req = val
}

func (p *InteractionServiceUnfollowArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceUnfollowArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceUnfollowArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceUnfollowArgs = map[int16]string{
	1: "req",
}

type InteractionServiceUnfollowResult struct {
	Success *FollowResponse `thrift:"success,0,optional" frugal:"0,optional,FollowResponse" json:"success,omitempty"`
}

func NewInteractionServiceUnfollowResult() *InteractionServiceUnfollowResult {
	return &InteractionServiceUnfollowResult{}
}

func (p *InteractionServiceUnfollowResult) InitDefault() {
}

var InteractionServiceUnfollowResult_Success_DEFAULT *FollowResponse

func (p *InteractionServiceUnfollowResult) GetSuccess() (v *FollowResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceUnfollowResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceUnfollowResult) SetSuccess(x interface{}) {
	p.Success = x.(*FollowResponse)
}

func (p *InteractionServiceUnfollowResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceUnfollowResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceUnfollowResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceUnfollowResult = map[int16]string{
	0: "success",
}

type InteractionServiceCommentArgs struct {
	Req *CommentRequest `thrift:"req,1" frugal:"1,default,CommentRequest" json:"req"`
}

func NewInteractionServiceCommentArgs() *InteractionServiceCommentArgs {
	return &InteractionServiceCommentArgs{}
}

func (p *InteractionServiceCommentArgs) InitDefault() {
}

var InteractionServiceCommentArgs_Req_DEFAULT *CommentRequest

func (p *InteractionServiceCommentArgs) GetReq() (v *CommentRequest) {
	if !p.IsSetReq() {
		return InteractionServiceCommentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceCommentArgs) SetReq(val *CommentRequest) {
	p.Req = val
}

func (p *InteractionServiceCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceCommentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceCommentArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceCommentArgs = map[int16]string{
	1: "req",
}

type InteractionServiceCommentResult struct {
	Success *CommentResponse `thrift:"success,0,optional" frugal:"0,optional,CommentResponse" json:"success,omitempty"`
}

func NewInteractionServiceCommentResult() *InteractionServiceCommentResult {
	return &InteractionServiceCommentResult{}
}

func (p *InteractionServiceCommentResult) InitDefault() {
}

var InteractionServiceCommentResult_Success_DEFAULT *CommentResponse

func (p *InteractionServiceCommentResult) GetSuccess() (v *CommentResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceCommentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*CommentResponse)
}

func (p *InteractionServiceCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceCommentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceCommentResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceCommentResult = map[int16]string{
	0: "success",
}

type InteractionServiceGetCommentsArgs struct {
	Req *GetCommentsRequest `thrift:"req,1" frugal:"1,default,GetCommentsRequest" json:"req"`
}

func NewInteractionServiceGetCommentsArgs() *InteractionServiceGetCommentsArgs {
	return &InteractionServiceGetCommentsArgs{}
}

func (p *InteractionServiceGetCommentsArgs) InitDefault() {
}

var InteractionServiceGetCommentsArgs_Req_DEFAULT *GetCommentsRequest

func (p *InteractionServiceGetCommentsArgs) GetReq() (v *GetCommentsRequest) {
	if !p.IsSetReq() {
		return InteractionServiceGetCommentsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceGetCommentsArgs) SetReq(val *GetCommentsRequest) {
	p.Req = val
}

func (p *InteractionServiceGetCommentsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceGetCommentsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceGetCommentsArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceGetCommentsArgs = map[int16]string{
	1: "req",
}

type InteractionServiceGetCommentsResult struct {
	Success *GetCommentsResponse `thrift:"success,0,optional" frugal:"0,optional,GetCommentsResponse" json:"success,omitempty"`
}

func NewInteractionServiceGetCommentsResult() *InteractionServiceGetCommentsResult {
	return &InteractionServiceGetCommentsResult{}
}

func (p *InteractionServiceGetCommentsResult) InitDefault() {
}

var InteractionServiceGetCommentsResult_Success_DEFAULT *GetCommentsResponse

func (p *InteractionServiceGetCommentsResult) GetSuccess() (v *GetCommentsResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceGetCommentsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceGetCommentsResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetCommentsResponse)
}

func (p *InteractionServiceGetCommentsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceGetCommentsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceGetCommentsResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceGetCommentsResult = map[int16]string{
	0: "success",
}

type InteractionServiceLikeArgs struct {
	Req *LikeRequest `thrift:"req,1" frugal:"1,default,LikeRequest" json:"req"`
}

func NewInteractionServiceLikeArgs() *InteractionServiceLikeArgs {
	return &InteractionServiceLikeArgs{}
}

func (p *InteractionServiceLikeArgs) InitDefault() {
}

var InteractionServiceLikeArgs_Req_DEFAULT *LikeRequest

func (p *InteractionServiceLikeArgs) GetReq() (v *LikeRequest) {
	if !p.IsSetReq() {
		return InteractionServiceLikeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceLikeArgs) SetReq(val *LikeRequest) {
	p.Req = val
}

func (p *InteractionServiceLikeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceLikeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceLikeArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceLikeArgs = map[int16]string{
	1: "req",
}

type InteractionServiceLikeResult struct {
	Success *LikeResponse `thrift:"success,0,optional" frugal:"0,optional,LikeResponse" json:"success,omitempty"`
}

func NewInteractionServiceLikeResult() *InteractionServiceLikeResult {
	return &InteractionServiceLikeResult{}
}

func (p *InteractionServiceLikeResult) InitDefault() {
}

var InteractionServiceLikeResult_Success_DEFAULT *LikeResponse

func (p *InteractionServiceLikeResult) GetSuccess() (v *LikeResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceLikeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceLikeResult) SetSuccess(x interface{}) {
	p.Success = x.(*LikeResponse)
}

func (p *InteractionServiceLikeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceLikeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceLikeResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceLikeResult = map[int16]string{
	0: "success",
}

type InteractionServiceUnlikeArgs struct {
	Req *LikeRequest `thrift:"req,1" frugal:"1,default,LikeRequest" json:"req"`
}

func NewInteractionServiceUnlikeArgs() *InteractionServiceUnlikeArgs {
	return &InteractionServiceUnlikeArgs{}
}

func (p *InteractionServiceUnlikeArgs) InitDefault() {
}

var InteractionServiceUnlikeArgs_Req_DEFAULT *LikeRequest

func (p *InteractionServiceUnlikeArgs) GetReq() (v *LikeRequest) {
	if !p.IsSetReq() {
		return InteractionServiceUnlikeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceUnlikeArgs) SetReq(val *LikeRequest) {
	p.Req = val
}

func (p *InteractionServiceUnlikeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceUnlikeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceUnlikeArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceUnlikeArgs = map[int16]string{
	1: "req",
}

type InteractionServiceUnlikeResult struct {
	Success *LikeResponse `thrift:"success,0,optional" frugal:"0,optional,LikeResponse" json:"success,omitempty"`
}

func NewInteractionServiceUnlikeResult() *InteractionServiceUnlikeResult {
	return &InteractionServiceUnlikeResult{}
}

func (p *InteractionServiceUnlikeResult) InitDefault() {
}

var InteractionServiceUnlikeResult_Success_DEFAULT *LikeResponse

func (p *InteractionServiceUnlikeResult) GetSuccess() (v *LikeResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceUnlikeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceUnlikeResult) SetSuccess(x interface{}) {
	p.Success = x.(*LikeResponse)
}

func (p *InteractionServiceUnlikeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceUnlikeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceUnlikeResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceUnlikeResult = map[int16]string{
	0: "success",
}

type InteractionServiceFavoriteArgs struct {
	Req *FavoriteRequest `thrift:"req,1" frugal:"1,default,FavoriteRequest" json:"req"`
}

func NewInteractionServiceFavoriteArgs() *InteractionServiceFavoriteArgs {
	return &InteractionServiceFavoriteArgs{}
}

func (p *InteractionServiceFavoriteArgs) InitDefault() {
}

var InteractionServiceFavoriteArgs_Req_DEFAULT *FavoriteRequest

func (p *InteractionServiceFavoriteArgs) GetReq() (v *FavoriteRequest) {
	if !p.IsSetReq() {
		return InteractionServiceFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceFavoriteArgs) SetReq(val *FavoriteRequest) {
	p.Req = val
}

func (p *InteractionServiceFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceFavoriteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceFavoriteArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceFavoriteArgs = map[int16]string{
	1: "req",
}

type InteractionServiceFavoriteResult struct {
	Success *FavoriteResponse `thrift:"success,0,optional" frugal:"0,optional,FavoriteResponse" json:"success,omitempty"`
}

func NewInteractionServiceFavoriteResult() *InteractionServiceFavoriteResult {
	return &InteractionServiceFavoriteResult{}
}

func (p *InteractionServiceFavoriteResult) InitDefault() {
}

var InteractionServiceFavoriteResult_Success_DEFAULT *FavoriteResponse

func (p *InteractionServiceFavoriteResult) GetSuccess() (v *FavoriteResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceFavoriteResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*FavoriteResponse)
}

func (p *InteractionServiceFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceFavoriteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceFavoriteResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceFavoriteResult = map[int16]string{
	0: "success",
}

type InteractionServiceUnfavoriteArgs struct {
	Req *FavoriteRequest `thrift:"req,1" frugal:"1,default,FavoriteRequest" json:"req"`
}

func NewInteractionServiceUnfavoriteArgs() *InteractionServiceUnfavoriteArgs {
	return &InteractionServiceUnfavoriteArgs{}
}

func (p *InteractionServiceUnfavoriteArgs) InitDefault() {
}

var InteractionServiceUnfavoriteArgs_Req_DEFAULT *FavoriteRequest

func (p *InteractionServiceUnfavoriteArgs) GetReq() (v *FavoriteRequest) {
	if !p.IsSetReq() {
		return InteractionServiceUnfavoriteArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceUnfavoriteArgs) SetReq(val *FavoriteRequest) {
	p.Req = val
}

func (p *InteractionServiceUnfavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceUnfavoriteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceUnfavoriteArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceUnfavoriteArgs = map[int16]string{
	1: "req",
}

type InteractionServiceUnfavoriteResult struct {
	Success *FavoriteResponse `thrift:"success,0,optional" frugal:"0,optional,FavoriteResponse" json:"success,omitempty"`
}

func NewInteractionServiceUnfavoriteResult() *InteractionServiceUnfavoriteResult {
	return &InteractionServiceUnfavoriteResult{}
}

func (p *InteractionServiceUnfavoriteResult) InitDefault() {
}

var InteractionServiceUnfavoriteResult_Success_DEFAULT *FavoriteResponse

func (p *InteractionServiceUnfavoriteResult) GetSuccess() (v *FavoriteResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceUnfavoriteResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceUnfavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*FavoriteResponse)
}

func (p *InteractionServiceUnfavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceUnfavoriteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceUnfavoriteResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceUnfavoriteResult = map[int16]string{
	0: "success",
}

type InteractionServiceSendDanmakuArgs struct {
	Req *DanmakuRequest `thrift:"req,1" frugal:"1,default,DanmakuRequest" json:"req"`
}

func NewInteractionServiceSendDanmakuArgs() *InteractionServiceSendDanmakuArgs {
	return &InteractionServiceSendDanmakuArgs{}
}

func (p *InteractionServiceSendDanmakuArgs) InitDefault() {
}

var InteractionServiceSendDanmakuArgs_Req_DEFAULT *DanmakuRequest

func (p *InteractionServiceSendDanmakuArgs) GetReq() (v *DanmakuRequest) {
	if !p.IsSetReq() {
		return InteractionServiceSendDanmakuArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceSendDanmakuArgs) SetReq(val *DanmakuRequest) {
	p.Req = val
}

func (p *InteractionServiceSendDanmakuArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceSendDanmakuArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceSendDanmakuArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceSendDanmakuArgs = map[int16]string{
	1: "req",
}

type InteractionServiceSendDanmakuResult struct {
	Success *DanmakuResponse `thrift:"success,0,optional" frugal:"0,optional,DanmakuResponse" json:"success,omitempty"`
}

func NewInteractionServiceSendDanmakuResult() *InteractionServiceSendDanmakuResult {
	return &InteractionServiceSendDanmakuResult{}
}

func (p *InteractionServiceSendDanmakuResult) InitDefault() {
}

var InteractionServiceSendDanmakuResult_Success_DEFAULT *DanmakuResponse

func (p *InteractionServiceSendDanmakuResult) GetSuccess() (v *DanmakuResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceSendDanmakuResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceSendDanmakuResult) SetSuccess(x interface{}) {
	p.Success = x.(*DanmakuResponse)
}

func (p *InteractionServiceSendDanmakuResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceSendDanmakuResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceSendDanmakuResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceSendDanmakuResult = map[int16]string{
	0: "success",
}

type InteractionServiceGetDanmakuArgs struct {
	Req *GetDanmakuRequest `thrift:"req,1" frugal:"1,default,GetDanmakuRequest" json:"req"`
}

func NewInteractionServiceGetDanmakuArgs() *InteractionServiceGetDanmakuArgs {
	return &InteractionServiceGetDanmakuArgs{}
}

func (p *InteractionServiceGetDanmakuArgs) InitDefault() {
}

var InteractionServiceGetDanmakuArgs_Req_DEFAULT *GetDanmakuRequest

func (p *InteractionServiceGetDanmakuArgs) GetReq() (v *GetDanmakuRequest) {
	if !p.IsSetReq() {
		return InteractionServiceGetDanmakuArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceGetDanmakuArgs) SetReq(val *GetDanmakuRequest) {
	p.Req = val
}

func (p *InteractionServiceGetDanmakuArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceGetDanmakuArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceGetDanmakuArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceGetDanmakuArgs = map[int16]string{
	1: "req",
}

type InteractionServiceGetDanmakuResult struct {
	Success *GetDanmakuResponse `thrift:"success,0,optional" frugal:"0,optional,GetDanmakuResponse" json:"success,omitempty"`
}

func NewInteractionServiceGetDanmakuResult() *InteractionServiceGetDanmakuResult {
	return &InteractionServiceGetDanmakuResult{}
}

func (p *InteractionServiceGetDanmakuResult) InitDefault() {
}

var InteractionServiceGetDanmakuResult_Success_DEFAULT *GetDanmakuResponse

func (p *InteractionServiceGetDanmakuResult) GetSuccess() (v *GetDanmakuResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceGetDanmakuResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceGetDanmakuResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetDanmakuResponse)
}

func (p *InteractionServiceGetDanmakuResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceGetDanmakuResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceGetDanmakuResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceGetDanmakuResult = map[int16]string{
	0: "success",
}

type InteractionServiceShareArgs struct {
	Req *ShareRequest `thrift:"req,1" frugal:"1,default,ShareRequest" json:"req"`
}

func NewInteractionServiceShareArgs() *InteractionServiceShareArgs {
	return &InteractionServiceShareArgs{}
}

func (p *InteractionServiceShareArgs) InitDefault() {
}

var InteractionServiceShareArgs_Req_DEFAULT *ShareRequest

func (p *InteractionServiceShareArgs) GetReq() (v *ShareRequest) {
	if !p.IsSetReq() {
		return InteractionServiceShareArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceShareArgs) SetReq(val *ShareRequest) {
	p.Req = val
}

func (p *InteractionServiceShareArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceShareArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceShareArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceShareArgs = map[int16]string{
	1: "req",
}

type InteractionServiceShareResult struct {
	Success *ShareResponse `thrift:"success,0,optional" frugal:"0,optional,ShareResponse" json:"success,omitempty"`
}

func NewInteractionServiceShareResult() *InteractionServiceShareResult {
	return &InteractionServiceShareResult{}
}

func (p *InteractionServiceShareResult) InitDefault() {
}

var InteractionServiceShareResult_Success_DEFAULT *ShareResponse

func (p *InteractionServiceShareResult) GetSuccess() (v *ShareResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceShareResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceShareResult) SetSuccess(x interface{}) {
	p.Success = x.(*ShareResponse)
}

func (p *InteractionServiceShareResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceShareResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceShareResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceShareResult = map[int16]string{
	0: "success",
}
