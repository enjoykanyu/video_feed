// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package user

import (
	"context"
	"fmt"
)

type RegisterRequest struct {
	Phone      string `thrift:"phone,1,required" frugal:"1,required,string" json:"phone"`
	VerifyCode string `thrift:"verifyCode,2,required" frugal:"2,required,string" json:"verifyCode"`
}

func NewRegisterRequest() *RegisterRequest {
	return &RegisterRequest{}
}

func (p *RegisterRequest) InitDefault() {
}

func (p *RegisterRequest) GetPhone() (v string) {
	return p.Phone
}

func (p *RegisterRequest) GetVerifyCode() (v string) {
	return p.VerifyCode
}
func (p *RegisterRequest) SetPhone(val string) {
	p.Phone = val
}
func (p *RegisterRequest) SetVerifyCode(val string) {
	p.VerifyCode = val
}

func (p *RegisterRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterRequest(%+v)", *p)
}

var fieldIDToName_RegisterRequest = map[int16]string{
	1: "phone",
	2: "verifyCode",
}

type RegisterResponse struct {
	Success  bool    `thrift:"success,1,required" frugal:"1,required,bool" json:"success"`
	Message  *string `thrift:"message,2,optional" frugal:"2,optional,string" json:"message,omitempty"`
	UserId   *int64  `thrift:"userId,3,optional" frugal:"3,optional,i64" json:"userId,omitempty"`
	Username *string `thrift:"username,4,optional" frugal:"4,optional,string" json:"username,omitempty"`
}

func NewRegisterResponse() *RegisterResponse {
	return &RegisterResponse{}
}

func (p *RegisterResponse) InitDefault() {
}

func (p *RegisterResponse) GetSuccess() (v bool) {
	return p.Success
}

var RegisterResponse_Message_DEFAULT string

func (p *RegisterResponse) GetMessage() (v string) {
	if !p.IsSetMessage() {
		return RegisterResponse_Message_DEFAULT
	}
	return *p.Message
}

var RegisterResponse_UserId_DEFAULT int64

func (p *RegisterResponse) GetUserId() (v int64) {
	if !p.IsSetUserId() {
		return RegisterResponse_UserId_DEFAULT
	}
	return *p.UserId
}

var RegisterResponse_Username_DEFAULT string

func (p *RegisterResponse) GetUsername() (v string) {
	if !p.IsSetUsername() {
		return RegisterResponse_Username_DEFAULT
	}
	return *p.Username
}
func (p *RegisterResponse) SetSuccess(val bool) {
	p.Success = val
}
func (p *RegisterResponse) SetMessage(val *string) {
	p.Message = val
}
func (p *RegisterResponse) SetUserId(val *int64) {
	p.UserId = val
}
func (p *RegisterResponse) SetUsername(val *string) {
	p.Username = val
}

func (p *RegisterResponse) IsSetMessage() bool {
	return p.Message != nil
}

func (p *RegisterResponse) IsSetUserId() bool {
	return p.UserId != nil
}

func (p *RegisterResponse) IsSetUsername() bool {
	return p.Username != nil
}

func (p *RegisterResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterResponse(%+v)", *p)
}

var fieldIDToName_RegisterResponse = map[int16]string{
	1: "success",
	2: "message",
	3: "userId",
	4: "username",
}

type LoginRequest struct {
	Phone      string `thrift:"phone,1,required" frugal:"1,required,string" json:"phone"`
	VerifyCode string `thrift:"verifyCode,2,required" frugal:"2,required,string" json:"verifyCode"`
}

func NewLoginRequest() *LoginRequest {
	return &LoginRequest{}
}

func (p *LoginRequest) InitDefault() {
}

func (p *LoginRequest) GetPhone() (v string) {
	return p.Phone
}

func (p *LoginRequest) GetVerifyCode() (v string) {
	return p.VerifyCode
}
func (p *LoginRequest) SetPhone(val string) {
	p.Phone = val
}
func (p *LoginRequest) SetVerifyCode(val string) {
	p.VerifyCode = val
}

func (p *LoginRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginRequest(%+v)", *p)
}

var fieldIDToName_LoginRequest = map[int16]string{
	1: "phone",
	2: "verifyCode",
}

type LoginResponse struct {
	Success  bool      `thrift:"success,1,required" frugal:"1,required,bool" json:"success"`
	Message  *string   `thrift:"message,2,optional" frugal:"2,optional,string" json:"message,omitempty"`
	UserId   *int64    `thrift:"userId,3,optional" frugal:"3,optional,i64" json:"userId,omitempty"`
	Token    *string   `thrift:"token,4,optional" frugal:"4,optional,string" json:"token,omitempty"`
	UserInfo *UserInfo `thrift:"userInfo,5,optional" frugal:"5,optional,UserInfo" json:"userInfo,omitempty"`
}

func NewLoginResponse() *LoginResponse {
	return &LoginResponse{}
}

func (p *LoginResponse) InitDefault() {
}

func (p *LoginResponse) GetSuccess() (v bool) {
	return p.Success
}

var LoginResponse_Message_DEFAULT string

func (p *LoginResponse) GetMessage() (v string) {
	if !p.IsSetMessage() {
		return LoginResponse_Message_DEFAULT
	}
	return *p.Message
}

var LoginResponse_UserId_DEFAULT int64

func (p *LoginResponse) GetUserId() (v int64) {
	if !p.IsSetUserId() {
		return LoginResponse_UserId_DEFAULT
	}
	return *p.UserId
}

var LoginResponse_Token_DEFAULT string

func (p *LoginResponse) GetToken() (v string) {
	if !p.IsSetToken() {
		return LoginResponse_Token_DEFAULT
	}
	return *p.Token
}

var LoginResponse_UserInfo_DEFAULT *UserInfo

func (p *LoginResponse) GetUserInfo() (v *UserInfo) {
	if !p.IsSetUserInfo() {
		return LoginResponse_UserInfo_DEFAULT
	}
	return p.UserInfo
}
func (p *LoginResponse) SetSuccess(val bool) {
	p.Success = val
}
func (p *LoginResponse) SetMessage(val *string) {
	p.Message = val
}
func (p *LoginResponse) SetUserId(val *int64) {
	p.UserId = val
}
func (p *LoginResponse) SetToken(val *string) {
	p.Token = val
}
func (p *LoginResponse) SetUserInfo(val *UserInfo) {
	p.UserInfo = val
}

func (p *LoginResponse) IsSetMessage() bool {
	return p.Message != nil
}

func (p *LoginResponse) IsSetUserId() bool {
	return p.UserId != nil
}

func (p *LoginResponse) IsSetToken() bool {
	return p.Token != nil
}

func (p *LoginResponse) IsSetUserInfo() bool {
	return p.UserInfo != nil
}

func (p *LoginResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginResponse(%+v)", *p)
}

var fieldIDToName_LoginResponse = map[int16]string{
	1: "success",
	2: "message",
	3: "userId",
	4: "token",
	5: "userInfo",
}

type UserInfo struct {
	UserId        int64   `thrift:"userId,1,required" frugal:"1,required,i64" json:"userId"`
	Username      string  `thrift:"username,2,required" frugal:"2,required,string" json:"username"`
	Avatar        *string `thrift:"avatar,3,optional" frugal:"3,optional,string" json:"avatar,omitempty"`
	Signature     *string `thrift:"signature,4,optional" frugal:"4,optional,string" json:"signature,omitempty"`
	FollowCount   *int32  `thrift:"followCount,5,optional" frugal:"5,optional,i32" json:"followCount,omitempty"`
	FollowerCount *int32  `thrift:"followerCount,6,optional" frugal:"6,optional,i32" json:"followerCount,omitempty"`
	IsFollow      *bool   `thrift:"isFollow,7,optional" frugal:"7,optional,bool" json:"isFollow,omitempty"`
}

func NewUserInfo() *UserInfo {
	return &UserInfo{}
}

func (p *UserInfo) InitDefault() {
}

func (p *UserInfo) GetUserId() (v int64) {
	return p.UserId
}

func (p *UserInfo) GetUsername() (v string) {
	return p.Username
}

var UserInfo_Avatar_DEFAULT string

func (p *UserInfo) GetAvatar() (v string) {
	if !p.IsSetAvatar() {
		return UserInfo_Avatar_DEFAULT
	}
	return *p.Avatar
}

var UserInfo_Signature_DEFAULT string

func (p *UserInfo) GetSignature() (v string) {
	if !p.IsSetSignature() {
		return UserInfo_Signature_DEFAULT
	}
	return *p.Signature
}

var UserInfo_FollowCount_DEFAULT int32

func (p *UserInfo) GetFollowCount() (v int32) {
	if !p.IsSetFollowCount() {
		return UserInfo_FollowCount_DEFAULT
	}
	return *p.FollowCount
}

var UserInfo_FollowerCount_DEFAULT int32

func (p *UserInfo) GetFollowerCount() (v int32) {
	if !p.IsSetFollowerCount() {
		return UserInfo_FollowerCount_DEFAULT
	}
	return *p.FollowerCount
}

var UserInfo_IsFollow_DEFAULT bool

func (p *UserInfo) GetIsFollow() (v bool) {
	if !p.IsSetIsFollow() {
		return UserInfo_IsFollow_DEFAULT
	}
	return *p.IsFollow
}
func (p *UserInfo) SetUserId(val int64) {
	p.UserId = val
}
func (p *UserInfo) SetUsername(val string) {
	p.Username = val
}
func (p *UserInfo) SetAvatar(val *string) {
	p.Avatar = val
}
func (p *UserInfo) SetSignature(val *string) {
	p.Signature = val
}
func (p *UserInfo) SetFollowCount(val *int32) {
	p.FollowCount = val
}
func (p *UserInfo) SetFollowerCount(val *int32) {
	p.FollowerCount = val
}
func (p *UserInfo) SetIsFollow(val *bool) {
	p.IsFollow = val
}

func (p *UserInfo) IsSetAvatar() bool {
	return p.Avatar != nil
}

func (p *UserInfo) IsSetSignature() bool {
	return p.Signature != nil
}

func (p *UserInfo) IsSetFollowCount() bool {
	return p.FollowCount != nil
}

func (p *UserInfo) IsSetFollowerCount() bool {
	return p.FollowerCount != nil
}

func (p *UserInfo) IsSetIsFollow() bool {
	return p.IsFollow != nil
}

func (p *UserInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfo(%+v)", *p)
}

var fieldIDToName_UserInfo = map[int16]string{
	1: "userId",
	2: "username",
	3: "avatar",
	4: "signature",
	5: "followCount",
	6: "followerCount",
	7: "isFollow",
}

type GetUserInfoRequest struct {
	UserId        int64  `thrift:"userId,1,required" frugal:"1,required,i64" json:"userId"`
	CurrentUserId *int64 `thrift:"currentUserId,2,optional" frugal:"2,optional,i64" json:"currentUserId,omitempty"`
}

func NewGetUserInfoRequest() *GetUserInfoRequest {
	return &GetUserInfoRequest{}
}

func (p *GetUserInfoRequest) InitDefault() {
}

func (p *GetUserInfoRequest) GetUserId() (v int64) {
	return p.UserId
}

var GetUserInfoRequest_CurrentUserId_DEFAULT int64

func (p *GetUserInfoRequest) GetCurrentUserId() (v int64) {
	if !p.IsSetCurrentUserId() {
		return GetUserInfoRequest_CurrentUserId_DEFAULT
	}
	return *p.CurrentUserId
}
func (p *GetUserInfoRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *GetUserInfoRequest) SetCurrentUserId(val *int64) {
	p.CurrentUserId = val
}

func (p *GetUserInfoRequest) IsSetCurrentUserId() bool {
	return p.CurrentUserId != nil
}

func (p *GetUserInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserInfoRequest(%+v)", *p)
}

var fieldIDToName_GetUserInfoRequest = map[int16]string{
	1: "userId",
	2: "currentUserId",
}

type GetUserInfoResponse struct {
	Success  bool      `thrift:"success,1,required" frugal:"1,required,bool" json:"success"`
	Message  *string   `thrift:"message,2,optional" frugal:"2,optional,string" json:"message,omitempty"`
	UserInfo *UserInfo `thrift:"userInfo,3,optional" frugal:"3,optional,UserInfo" json:"userInfo,omitempty"`
}

func NewGetUserInfoResponse() *GetUserInfoResponse {
	return &GetUserInfoResponse{}
}

func (p *GetUserInfoResponse) InitDefault() {
}

func (p *GetUserInfoResponse) GetSuccess() (v bool) {
	return p.Success
}

var GetUserInfoResponse_Message_DEFAULT string

func (p *GetUserInfoResponse) GetMessage() (v string) {
	if !p.IsSetMessage() {
		return GetUserInfoResponse_Message_DEFAULT
	}
	return *p.Message
}

var GetUserInfoResponse_UserInfo_DEFAULT *UserInfo

func (p *GetUserInfoResponse) GetUserInfo() (v *UserInfo) {
	if !p.IsSetUserInfo() {
		return GetUserInfoResponse_UserInfo_DEFAULT
	}
	return p.UserInfo
}
func (p *GetUserInfoResponse) SetSuccess(val bool) {
	p.Success = val
}
func (p *GetUserInfoResponse) SetMessage(val *string) {
	p.Message = val
}
func (p *GetUserInfoResponse) SetUserInfo(val *UserInfo) {
	p.UserInfo = val
}

func (p *GetUserInfoResponse) IsSetMessage() bool {
	return p.Message != nil
}

func (p *GetUserInfoResponse) IsSetUserInfo() bool {
	return p.UserInfo != nil
}

func (p *GetUserInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserInfoResponse(%+v)", *p)
}

var fieldIDToName_GetUserInfoResponse = map[int16]string{
	1: "success",
	2: "message",
	3: "userInfo",
}

type SendVerifyCodeRequest struct {
	Phone    string `thrift:"phone,1,required" frugal:"1,required,string" json:"phone"`
	CodeType int32  `thrift:"codeType,2,required" frugal:"2,required,i32" json:"codeType"`
}

func NewSendVerifyCodeRequest() *SendVerifyCodeRequest {
	return &SendVerifyCodeRequest{}
}

func (p *SendVerifyCodeRequest) InitDefault() {
}

func (p *SendVerifyCodeRequest) GetPhone() (v string) {
	return p.Phone
}

func (p *SendVerifyCodeRequest) GetCodeType() (v int32) {
	return p.CodeType
}
func (p *SendVerifyCodeRequest) SetPhone(val string) {
	p.Phone = val
}
func (p *SendVerifyCodeRequest) SetCodeType(val int32) {
	p.CodeType = val
}

func (p *SendVerifyCodeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendVerifyCodeRequest(%+v)", *p)
}

var fieldIDToName_SendVerifyCodeRequest = map[int16]string{
	1: "phone",
	2: "codeType",
}

type SendVerifyCodeResponse struct {
	Success bool    `thrift:"success,1,required" frugal:"1,required,bool" json:"success"`
	Message *string `thrift:"message,2,optional" frugal:"2,optional,string" json:"message,omitempty"`
}

func NewSendVerifyCodeResponse() *SendVerifyCodeResponse {
	return &SendVerifyCodeResponse{}
}

func (p *SendVerifyCodeResponse) InitDefault() {
}

func (p *SendVerifyCodeResponse) GetSuccess() (v bool) {
	return p.Success
}

var SendVerifyCodeResponse_Message_DEFAULT string

func (p *SendVerifyCodeResponse) GetMessage() (v string) {
	if !p.IsSetMessage() {
		return SendVerifyCodeResponse_Message_DEFAULT
	}
	return *p.Message
}
func (p *SendVerifyCodeResponse) SetSuccess(val bool) {
	p.Success = val
}
func (p *SendVerifyCodeResponse) SetMessage(val *string) {
	p.Message = val
}

func (p *SendVerifyCodeResponse) IsSetMessage() bool {
	return p.Message != nil
}

func (p *SendVerifyCodeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendVerifyCodeResponse(%+v)", *p)
}

var fieldIDToName_SendVerifyCodeResponse = map[int16]string{
	1: "success",
	2: "message",
}

type UserService interface {
	Register(ctx context.Context, req *RegisterRequest) (r *RegisterResponse, err error)

	Login(ctx context.Context, req *LoginRequest) (r *LoginResponse, err error)

	GetUserInfo(ctx context.Context, req *GetUserInfoRequest) (r *GetUserInfoResponse, err error)

	SendVerifyCode(ctx context.Context, req *SendVerifyCodeRequest) (r *SendVerifyCodeResponse, err error)
}

type UserServiceRegisterArgs struct {
	Req *RegisterRequest `thrift:"req,1" frugal:"1,default,RegisterRequest" json:"req"`
}

func NewUserServiceRegisterArgs() *UserServiceRegisterArgs {
	return &UserServiceRegisterArgs{}
}

func (p *UserServiceRegisterArgs) InitDefault() {
}

var UserServiceRegisterArgs_Req_DEFAULT *RegisterRequest

func (p *UserServiceRegisterArgs) GetReq() (v *RegisterRequest) {
	if !p.IsSetReq() {
		return UserServiceRegisterArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceRegisterArgs) SetReq(val *RegisterRequest) {
	p.Req = val
}

func (p *UserServiceRegisterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceRegisterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceRegisterArgs(%+v)", *p)
}

var fieldIDToName_UserServiceRegisterArgs = map[int16]string{
	1: "req",
}

type UserServiceRegisterResult struct {
	Success *RegisterResponse `thrift:"success,0,optional" frugal:"0,optional,RegisterResponse" json:"success,omitempty"`
}

func NewUserServiceRegisterResult() *UserServiceRegisterResult {
	return &UserServiceRegisterResult{}
}

func (p *UserServiceRegisterResult) InitDefault() {
}

var UserServiceRegisterResult_Success_DEFAULT *RegisterResponse

func (p *UserServiceRegisterResult) GetSuccess() (v *RegisterResponse) {
	if !p.IsSetSuccess() {
		return UserServiceRegisterResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceRegisterResult) SetSuccess(x interface{}) {
	p.Success = x.(*RegisterResponse)
}

func (p *UserServiceRegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceRegisterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceRegisterResult(%+v)", *p)
}

var fieldIDToName_UserServiceRegisterResult = map[int16]string{
	0: "success",
}

type UserServiceLoginArgs struct {
	Req *LoginRequest `thrift:"req,1" frugal:"1,default,LoginRequest" json:"req"`
}

func NewUserServiceLoginArgs() *UserServiceLoginArgs {
	return &UserServiceLoginArgs{}
}

func (p *UserServiceLoginArgs) InitDefault() {
}

var UserServiceLoginArgs_Req_DEFAULT *LoginRequest

func (p *UserServiceLoginArgs) GetReq() (v *LoginRequest) {
	if !p.IsSetReq() {
		return UserServiceLoginArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceLoginArgs) SetReq(val *LoginRequest) {
	p.Req = val
}

func (p *UserServiceLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceLoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceLoginArgs(%+v)", *p)
}

var fieldIDToName_UserServiceLoginArgs = map[int16]string{
	1: "req",
}

type UserServiceLoginResult struct {
	Success *LoginResponse `thrift:"success,0,optional" frugal:"0,optional,LoginResponse" json:"success,omitempty"`
}

func NewUserServiceLoginResult() *UserServiceLoginResult {
	return &UserServiceLoginResult{}
}

func (p *UserServiceLoginResult) InitDefault() {
}

var UserServiceLoginResult_Success_DEFAULT *LoginResponse

func (p *UserServiceLoginResult) GetSuccess() (v *LoginResponse) {
	if !p.IsSetSuccess() {
		return UserServiceLoginResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*LoginResponse)
}

func (p *UserServiceLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceLoginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceLoginResult(%+v)", *p)
}

var fieldIDToName_UserServiceLoginResult = map[int16]string{
	0: "success",
}

type UserServiceGetUserInfoArgs struct {
	Req *GetUserInfoRequest `thrift:"req,1" frugal:"1,default,GetUserInfoRequest" json:"req"`
}

func NewUserServiceGetUserInfoArgs() *UserServiceGetUserInfoArgs {
	return &UserServiceGetUserInfoArgs{}
}

func (p *UserServiceGetUserInfoArgs) InitDefault() {
}

var UserServiceGetUserInfoArgs_Req_DEFAULT *GetUserInfoRequest

func (p *UserServiceGetUserInfoArgs) GetReq() (v *GetUserInfoRequest) {
	if !p.IsSetReq() {
		return UserServiceGetUserInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceGetUserInfoArgs) SetReq(val *GetUserInfoRequest) {
	p.Req = val
}

func (p *UserServiceGetUserInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceGetUserInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetUserInfoArgs(%+v)", *p)
}

var fieldIDToName_UserServiceGetUserInfoArgs = map[int16]string{
	1: "req",
}

type UserServiceGetUserInfoResult struct {
	Success *GetUserInfoResponse `thrift:"success,0,optional" frugal:"0,optional,GetUserInfoResponse" json:"success,omitempty"`
}

func NewUserServiceGetUserInfoResult() *UserServiceGetUserInfoResult {
	return &UserServiceGetUserInfoResult{}
}

func (p *UserServiceGetUserInfoResult) InitDefault() {
}

var UserServiceGetUserInfoResult_Success_DEFAULT *GetUserInfoResponse

func (p *UserServiceGetUserInfoResult) GetSuccess() (v *GetUserInfoResponse) {
	if !p.IsSetSuccess() {
		return UserServiceGetUserInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceGetUserInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetUserInfoResponse)
}

func (p *UserServiceGetUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceGetUserInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetUserInfoResult(%+v)", *p)
}

var fieldIDToName_UserServiceGetUserInfoResult = map[int16]string{
	0: "success",
}

type UserServiceSendVerifyCodeArgs struct {
	Req *SendVerifyCodeRequest `thrift:"req,1" frugal:"1,default,SendVerifyCodeRequest" json:"req"`
}

func NewUserServiceSendVerifyCodeArgs() *UserServiceSendVerifyCodeArgs {
	return &UserServiceSendVerifyCodeArgs{}
}

func (p *UserServiceSendVerifyCodeArgs) InitDefault() {
}

var UserServiceSendVerifyCodeArgs_Req_DEFAULT *SendVerifyCodeRequest

func (p *UserServiceSendVerifyCodeArgs) GetReq() (v *SendVerifyCodeRequest) {
	if !p.IsSetReq() {
		return UserServiceSendVerifyCodeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceSendVerifyCodeArgs) SetReq(val *SendVerifyCodeRequest) {
	p.Req = val
}

func (p *UserServiceSendVerifyCodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceSendVerifyCodeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceSendVerifyCodeArgs(%+v)", *p)
}

var fieldIDToName_UserServiceSendVerifyCodeArgs = map[int16]string{
	1: "req",
}

type UserServiceSendVerifyCodeResult struct {
	Success *SendVerifyCodeResponse `thrift:"success,0,optional" frugal:"0,optional,SendVerifyCodeResponse" json:"success,omitempty"`
}

func NewUserServiceSendVerifyCodeResult() *UserServiceSendVerifyCodeResult {
	return &UserServiceSendVerifyCodeResult{}
}

func (p *UserServiceSendVerifyCodeResult) InitDefault() {
}

var UserServiceSendVerifyCodeResult_Success_DEFAULT *SendVerifyCodeResponse

func (p *UserServiceSendVerifyCodeResult) GetSuccess() (v *SendVerifyCodeResponse) {
	if !p.IsSetSuccess() {
		return UserServiceSendVerifyCodeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceSendVerifyCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*SendVerifyCodeResponse)
}

func (p *UserServiceSendVerifyCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceSendVerifyCodeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceSendVerifyCodeResult(%+v)", *p)
}

var fieldIDToName_UserServiceSendVerifyCodeResult = map[int16]string{
	0: "success",
}
