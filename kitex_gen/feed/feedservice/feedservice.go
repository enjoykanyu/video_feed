// Code generated by Kitex v0.13.1. DO NOT EDIT.

package feedservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	feed "video_douyin/kitex_gen/feed"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GetFeed": kitex.NewMethodInfo(
		getFeedHandler,
		newFeedServiceGetFeedArgs,
		newFeedServiceGetFeedResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetVideoChunk": kitex.NewMethodInfo(
		getVideoChunkHandler,
		newFeedServiceGetVideoChunkArgs,
		newFeedServiceGetVideoChunkResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"PreloadVideo": kitex.NewMethodInfo(
		preloadVideoHandler,
		newFeedServicePreloadVideoArgs,
		newFeedServicePreloadVideoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	feedServiceServiceInfo                = NewServiceInfo()
	feedServiceServiceInfoForClient       = NewServiceInfoForClient()
	feedServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return feedServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return feedServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return feedServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "FeedService"
	handlerType := (*feed.FeedService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "feed",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func getFeedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*feed.FeedServiceGetFeedArgs)
	realResult := result.(*feed.FeedServiceGetFeedResult)
	success, err := handler.(feed.FeedService).GetFeed(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFeedServiceGetFeedArgs() interface{} {
	return feed.NewFeedServiceGetFeedArgs()
}

func newFeedServiceGetFeedResult() interface{} {
	return feed.NewFeedServiceGetFeedResult()
}

func getVideoChunkHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*feed.FeedServiceGetVideoChunkArgs)
	realResult := result.(*feed.FeedServiceGetVideoChunkResult)
	success, err := handler.(feed.FeedService).GetVideoChunk(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFeedServiceGetVideoChunkArgs() interface{} {
	return feed.NewFeedServiceGetVideoChunkArgs()
}

func newFeedServiceGetVideoChunkResult() interface{} {
	return feed.NewFeedServiceGetVideoChunkResult()
}

func preloadVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*feed.FeedServicePreloadVideoArgs)
	realResult := result.(*feed.FeedServicePreloadVideoResult)
	success, err := handler.(feed.FeedService).PreloadVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFeedServicePreloadVideoArgs() interface{} {
	return feed.NewFeedServicePreloadVideoArgs()
}

func newFeedServicePreloadVideoResult() interface{} {
	return feed.NewFeedServicePreloadVideoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetFeed(ctx context.Context, req *feed.FeedRequest) (r *feed.FeedResponse, err error) {
	var _args feed.FeedServiceGetFeedArgs
	_args.Req = req
	var _result feed.FeedServiceGetFeedResult
	if err = p.c.Call(ctx, "GetFeed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoChunk(ctx context.Context, req *feed.ChunkRequest) (r *feed.ChunkResponse, err error) {
	var _args feed.FeedServiceGetVideoChunkArgs
	_args.Req = req
	var _result feed.FeedServiceGetVideoChunkResult
	if err = p.c.Call(ctx, "GetVideoChunk", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PreloadVideo(ctx context.Context, req *feed.PreloadRequest) (r *feed.PreloadResponse, err error) {
	var _args feed.FeedServicePreloadVideoArgs
	_args.Req = req
	var _result feed.FeedServicePreloadVideoResult
	if err = p.c.Call(ctx, "PreloadVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
