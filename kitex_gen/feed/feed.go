// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package feed

import (
	"context"
	"fmt"
)

type Video struct {
	Id          int64  `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	UserId      int64  `thrift:"user_id,2" frugal:"2,default,i64" json:"user_id"`
	Title       string `thrift:"title,3" frugal:"3,default,string" json:"title"`
	Description string `thrift:"description,4" frugal:"4,default,string" json:"description"`
	CoverUrl    string `thrift:"cover_url,5" frugal:"5,default,string" json:"cover_url"`
	VideoUrl    string `thrift:"video_url,6" frugal:"6,default,string" json:"video_url"`
	Status      int32  `thrift:"status,7" frugal:"7,default,i32" json:"status"`
	CreatedAt   int64  `thrift:"created_at,8" frugal:"8,default,i64" json:"created_at"`
	UpdatedAt   int64  `thrift:"updated_at,9" frugal:"9,default,i64" json:"updated_at"`
}

func NewVideo() *Video {
	return &Video{}
}

func (p *Video) InitDefault() {
}

func (p *Video) GetId() (v int64) {
	return p.Id
}

func (p *Video) GetUserId() (v int64) {
	return p.UserId
}

func (p *Video) GetTitle() (v string) {
	return p.Title
}

func (p *Video) GetDescription() (v string) {
	return p.Description
}

func (p *Video) GetCoverUrl() (v string) {
	return p.CoverUrl
}

func (p *Video) GetVideoUrl() (v string) {
	return p.VideoUrl
}

func (p *Video) GetStatus() (v int32) {
	return p.Status
}

func (p *Video) GetCreatedAt() (v int64) {
	return p.CreatedAt
}

func (p *Video) GetUpdatedAt() (v int64) {
	return p.UpdatedAt
}
func (p *Video) SetId(val int64) {
	p.Id = val
}
func (p *Video) SetUserId(val int64) {
	p.UserId = val
}
func (p *Video) SetTitle(val string) {
	p.Title = val
}
func (p *Video) SetDescription(val string) {
	p.Description = val
}
func (p *Video) SetCoverUrl(val string) {
	p.CoverUrl = val
}
func (p *Video) SetVideoUrl(val string) {
	p.VideoUrl = val
}
func (p *Video) SetStatus(val int32) {
	p.Status = val
}
func (p *Video) SetCreatedAt(val int64) {
	p.CreatedAt = val
}
func (p *Video) SetUpdatedAt(val int64) {
	p.UpdatedAt = val
}

func (p *Video) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Video(%+v)", *p)
}

var fieldIDToName_Video = map[int16]string{
	1: "id",
	2: "user_id",
	3: "title",
	4: "description",
	5: "cover_url",
	6: "video_url",
	7: "status",
	8: "created_at",
	9: "updated_at",
}

type FeedRequest struct {
	UserId   int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	LastTime int64 `thrift:"last_time,2" frugal:"2,default,i64" json:"last_time"`
	Count    int32 `thrift:"count,3" frugal:"3,default,i32" json:"count"`
}

func NewFeedRequest() *FeedRequest {
	return &FeedRequest{}
}

func (p *FeedRequest) InitDefault() {
}

func (p *FeedRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *FeedRequest) GetLastTime() (v int64) {
	return p.LastTime
}

func (p *FeedRequest) GetCount() (v int32) {
	return p.Count
}
func (p *FeedRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *FeedRequest) SetLastTime(val int64) {
	p.LastTime = val
}
func (p *FeedRequest) SetCount(val int32) {
	p.Count = val
}

func (p *FeedRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FeedRequest(%+v)", *p)
}

var fieldIDToName_FeedRequest = map[int16]string{
	1: "user_id",
	2: "last_time",
	3: "count",
}

type FeedResponse struct {
	Videos   []*Video `thrift:"videos,1" frugal:"1,default,list<Video>" json:"videos"`
	NextTime int64    `thrift:"next_time,2" frugal:"2,default,i64" json:"next_time"`
	HasMore  bool     `thrift:"has_more,3" frugal:"3,default,bool" json:"has_more"`
}

func NewFeedResponse() *FeedResponse {
	return &FeedResponse{}
}

func (p *FeedResponse) InitDefault() {
}

func (p *FeedResponse) GetVideos() (v []*Video) {
	return p.Videos
}

func (p *FeedResponse) GetNextTime() (v int64) {
	return p.NextTime
}

func (p *FeedResponse) GetHasMore() (v bool) {
	return p.HasMore
}
func (p *FeedResponse) SetVideos(val []*Video) {
	p.Videos = val
}
func (p *FeedResponse) SetNextTime(val int64) {
	p.NextTime = val
}
func (p *FeedResponse) SetHasMore(val bool) {
	p.HasMore = val
}

func (p *FeedResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FeedResponse(%+v)", *p)
}

var fieldIDToName_FeedResponse = map[int16]string{
	1: "videos",
	2: "next_time",
	3: "has_more",
}

type ChunkRequest struct {
	VideoId    int64 `thrift:"video_id,1" frugal:"1,default,i64" json:"video_id"`
	ChunkIndex int32 `thrift:"chunk_index,2" frugal:"2,default,i32" json:"chunk_index"`
}

func NewChunkRequest() *ChunkRequest {
	return &ChunkRequest{}
}

func (p *ChunkRequest) InitDefault() {
}

func (p *ChunkRequest) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *ChunkRequest) GetChunkIndex() (v int32) {
	return p.ChunkIndex
}
func (p *ChunkRequest) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *ChunkRequest) SetChunkIndex(val int32) {
	p.ChunkIndex = val
}

func (p *ChunkRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChunkRequest(%+v)", *p)
}

var fieldIDToName_ChunkRequest = map[int16]string{
	1: "video_id",
	2: "chunk_index",
}

type ChunkResponse struct {
	Data         []byte `thrift:"data,1" frugal:"1,default,binary" json:"data"`
	TotalChunks  int32  `thrift:"total_chunks,2" frugal:"2,default,i32" json:"total_chunks"`
	CurrentChunk int32  `thrift:"current_chunk,3" frugal:"3,default,i32" json:"current_chunk"`
}

func NewChunkResponse() *ChunkResponse {
	return &ChunkResponse{}
}

func (p *ChunkResponse) InitDefault() {
}

func (p *ChunkResponse) GetData() (v []byte) {
	return p.Data
}

func (p *ChunkResponse) GetTotalChunks() (v int32) {
	return p.TotalChunks
}

func (p *ChunkResponse) GetCurrentChunk() (v int32) {
	return p.CurrentChunk
}
func (p *ChunkResponse) SetData(val []byte) {
	p.Data = val
}
func (p *ChunkResponse) SetTotalChunks(val int32) {
	p.TotalChunks = val
}
func (p *ChunkResponse) SetCurrentChunk(val int32) {
	p.CurrentChunk = val
}

func (p *ChunkResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChunkResponse(%+v)", *p)
}

var fieldIDToName_ChunkResponse = map[int16]string{
	1: "data",
	2: "total_chunks",
	3: "current_chunk",
}

type PreloadRequest struct {
	VideoId  int64 `thrift:"video_id,1" frugal:"1,default,i64" json:"video_id"`
	Priority int32 `thrift:"priority,2" frugal:"2,default,i32" json:"priority"`
}

func NewPreloadRequest() *PreloadRequest {
	return &PreloadRequest{}
}

func (p *PreloadRequest) InitDefault() {
}

func (p *PreloadRequest) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *PreloadRequest) GetPriority() (v int32) {
	return p.Priority
}
func (p *PreloadRequest) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *PreloadRequest) SetPriority(val int32) {
	p.Priority = val
}

func (p *PreloadRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PreloadRequest(%+v)", *p)
}

var fieldIDToName_PreloadRequest = map[int16]string{
	1: "video_id",
	2: "priority",
}

type PreloadResponse struct {
	Success bool   `thrift:"success,1" frugal:"1,default,bool" json:"success"`
	Message string `thrift:"message,2" frugal:"2,default,string" json:"message"`
}

func NewPreloadResponse() *PreloadResponse {
	return &PreloadResponse{}
}

func (p *PreloadResponse) InitDefault() {
}

func (p *PreloadResponse) GetSuccess() (v bool) {
	return p.Success
}

func (p *PreloadResponse) GetMessage() (v string) {
	return p.Message
}
func (p *PreloadResponse) SetSuccess(val bool) {
	p.Success = val
}
func (p *PreloadResponse) SetMessage(val string) {
	p.Message = val
}

func (p *PreloadResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PreloadResponse(%+v)", *p)
}

var fieldIDToName_PreloadResponse = map[int16]string{
	1: "success",
	2: "message",
}

type FeedService interface {
	GetFeed(ctx context.Context, req *FeedRequest) (r *FeedResponse, err error)

	GetVideoChunk(ctx context.Context, req *ChunkRequest) (r *ChunkResponse, err error)

	PreloadVideo(ctx context.Context, req *PreloadRequest) (r *PreloadResponse, err error)
}

type FeedServiceGetFeedArgs struct {
	Req *FeedRequest `thrift:"req,1" frugal:"1,default,FeedRequest" json:"req"`
}

func NewFeedServiceGetFeedArgs() *FeedServiceGetFeedArgs {
	return &FeedServiceGetFeedArgs{}
}

func (p *FeedServiceGetFeedArgs) InitDefault() {
}

var FeedServiceGetFeedArgs_Req_DEFAULT *FeedRequest

func (p *FeedServiceGetFeedArgs) GetReq() (v *FeedRequest) {
	if !p.IsSetReq() {
		return FeedServiceGetFeedArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FeedServiceGetFeedArgs) SetReq(val *FeedRequest) {
	p.Req = val
}

func (p *FeedServiceGetFeedArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FeedServiceGetFeedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FeedServiceGetFeedArgs(%+v)", *p)
}

var fieldIDToName_FeedServiceGetFeedArgs = map[int16]string{
	1: "req",
}

type FeedServiceGetFeedResult struct {
	Success *FeedResponse `thrift:"success,0,optional" frugal:"0,optional,FeedResponse" json:"success,omitempty"`
}

func NewFeedServiceGetFeedResult() *FeedServiceGetFeedResult {
	return &FeedServiceGetFeedResult{}
}

func (p *FeedServiceGetFeedResult) InitDefault() {
}

var FeedServiceGetFeedResult_Success_DEFAULT *FeedResponse

func (p *FeedServiceGetFeedResult) GetSuccess() (v *FeedResponse) {
	if !p.IsSetSuccess() {
		return FeedServiceGetFeedResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FeedServiceGetFeedResult) SetSuccess(x interface{}) {
	p.Success = x.(*FeedResponse)
}

func (p *FeedServiceGetFeedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FeedServiceGetFeedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FeedServiceGetFeedResult(%+v)", *p)
}

var fieldIDToName_FeedServiceGetFeedResult = map[int16]string{
	0: "success",
}

type FeedServiceGetVideoChunkArgs struct {
	Req *ChunkRequest `thrift:"req,1" frugal:"1,default,ChunkRequest" json:"req"`
}

func NewFeedServiceGetVideoChunkArgs() *FeedServiceGetVideoChunkArgs {
	return &FeedServiceGetVideoChunkArgs{}
}

func (p *FeedServiceGetVideoChunkArgs) InitDefault() {
}

var FeedServiceGetVideoChunkArgs_Req_DEFAULT *ChunkRequest

func (p *FeedServiceGetVideoChunkArgs) GetReq() (v *ChunkRequest) {
	if !p.IsSetReq() {
		return FeedServiceGetVideoChunkArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FeedServiceGetVideoChunkArgs) SetReq(val *ChunkRequest) {
	p.Req = val
}

func (p *FeedServiceGetVideoChunkArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FeedServiceGetVideoChunkArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FeedServiceGetVideoChunkArgs(%+v)", *p)
}

var fieldIDToName_FeedServiceGetVideoChunkArgs = map[int16]string{
	1: "req",
}

type FeedServiceGetVideoChunkResult struct {
	Success *ChunkResponse `thrift:"success,0,optional" frugal:"0,optional,ChunkResponse" json:"success,omitempty"`
}

func NewFeedServiceGetVideoChunkResult() *FeedServiceGetVideoChunkResult {
	return &FeedServiceGetVideoChunkResult{}
}

func (p *FeedServiceGetVideoChunkResult) InitDefault() {
}

var FeedServiceGetVideoChunkResult_Success_DEFAULT *ChunkResponse

func (p *FeedServiceGetVideoChunkResult) GetSuccess() (v *ChunkResponse) {
	if !p.IsSetSuccess() {
		return FeedServiceGetVideoChunkResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FeedServiceGetVideoChunkResult) SetSuccess(x interface{}) {
	p.Success = x.(*ChunkResponse)
}

func (p *FeedServiceGetVideoChunkResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FeedServiceGetVideoChunkResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FeedServiceGetVideoChunkResult(%+v)", *p)
}

var fieldIDToName_FeedServiceGetVideoChunkResult = map[int16]string{
	0: "success",
}

type FeedServicePreloadVideoArgs struct {
	Req *PreloadRequest `thrift:"req,1" frugal:"1,default,PreloadRequest" json:"req"`
}

func NewFeedServicePreloadVideoArgs() *FeedServicePreloadVideoArgs {
	return &FeedServicePreloadVideoArgs{}
}

func (p *FeedServicePreloadVideoArgs) InitDefault() {
}

var FeedServicePreloadVideoArgs_Req_DEFAULT *PreloadRequest

func (p *FeedServicePreloadVideoArgs) GetReq() (v *PreloadRequest) {
	if !p.IsSetReq() {
		return FeedServicePreloadVideoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FeedServicePreloadVideoArgs) SetReq(val *PreloadRequest) {
	p.Req = val
}

func (p *FeedServicePreloadVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FeedServicePreloadVideoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FeedServicePreloadVideoArgs(%+v)", *p)
}

var fieldIDToName_FeedServicePreloadVideoArgs = map[int16]string{
	1: "req",
}

type FeedServicePreloadVideoResult struct {
	Success *PreloadResponse `thrift:"success,0,optional" frugal:"0,optional,PreloadResponse" json:"success,omitempty"`
}

func NewFeedServicePreloadVideoResult() *FeedServicePreloadVideoResult {
	return &FeedServicePreloadVideoResult{}
}

func (p *FeedServicePreloadVideoResult) InitDefault() {
}

var FeedServicePreloadVideoResult_Success_DEFAULT *PreloadResponse

func (p *FeedServicePreloadVideoResult) GetSuccess() (v *PreloadResponse) {
	if !p.IsSetSuccess() {
		return FeedServicePreloadVideoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FeedServicePreloadVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*PreloadResponse)
}

func (p *FeedServicePreloadVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FeedServicePreloadVideoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FeedServicePreloadVideoResult(%+v)", *p)
}

var fieldIDToName_FeedServicePreloadVideoResult = map[int16]string{
	0: "success",
}
