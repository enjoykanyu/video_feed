// Code generated by Kitex v0.13.1. DO NOT EDIT.

package recommendservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	recommend "video_douyin/kitex_gen/recommend"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GetFeed": kitex.NewMethodInfo(
		getFeedHandler,
		newRecommendServiceGetFeedArgs,
		newRecommendServiceGetFeedResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateUserProfile": kitex.NewMethodInfo(
		updateUserProfileHandler,
		newRecommendServiceUpdateUserProfileArgs,
		newRecommendServiceUpdateUserProfileResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetUserInterests": kitex.NewMethodInfo(
		getUserInterestsHandler,
		newRecommendServiceGetUserInterestsArgs,
		newRecommendServiceGetUserInterestsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	recommendServiceServiceInfo                = NewServiceInfo()
	recommendServiceServiceInfoForClient       = NewServiceInfoForClient()
	recommendServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return recommendServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return recommendServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return recommendServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "RecommendService"
	handlerType := (*recommend.RecommendService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "recommend",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func getFeedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*recommend.RecommendServiceGetFeedArgs)
	realResult := result.(*recommend.RecommendServiceGetFeedResult)
	success, err := handler.(recommend.RecommendService).GetFeed(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRecommendServiceGetFeedArgs() interface{} {
	return recommend.NewRecommendServiceGetFeedArgs()
}

func newRecommendServiceGetFeedResult() interface{} {
	return recommend.NewRecommendServiceGetFeedResult()
}

func updateUserProfileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*recommend.RecommendServiceUpdateUserProfileArgs)
	realResult := result.(*recommend.RecommendServiceUpdateUserProfileResult)
	success, err := handler.(recommend.RecommendService).UpdateUserProfile(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRecommendServiceUpdateUserProfileArgs() interface{} {
	return recommend.NewRecommendServiceUpdateUserProfileArgs()
}

func newRecommendServiceUpdateUserProfileResult() interface{} {
	return recommend.NewRecommendServiceUpdateUserProfileResult()
}

func getUserInterestsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*recommend.RecommendServiceGetUserInterestsArgs)
	realResult := result.(*recommend.RecommendServiceGetUserInterestsResult)
	success, err := handler.(recommend.RecommendService).GetUserInterests(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRecommendServiceGetUserInterestsArgs() interface{} {
	return recommend.NewRecommendServiceGetUserInterestsArgs()
}

func newRecommendServiceGetUserInterestsResult() interface{} {
	return recommend.NewRecommendServiceGetUserInterestsResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetFeed(ctx context.Context, req *recommend.GetFeedRequest) (r *recommend.GetFeedResponse, err error) {
	var _args recommend.RecommendServiceGetFeedArgs
	_args.Req = req
	var _result recommend.RecommendServiceGetFeedResult
	if err = p.c.Call(ctx, "GetFeed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateUserProfile(ctx context.Context, req *recommend.UpdateUserProfileRequest) (r *recommend.UpdateUserProfileResponse, err error) {
	var _args recommend.RecommendServiceUpdateUserProfileArgs
	_args.Req = req
	var _result recommend.RecommendServiceUpdateUserProfileResult
	if err = p.c.Call(ctx, "UpdateUserProfile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserInterests(ctx context.Context, req *recommend.GetUserInterestsRequest) (r *recommend.GetUserInterestsResponse, err error) {
	var _args recommend.RecommendServiceGetUserInterestsArgs
	_args.Req = req
	var _result recommend.RecommendServiceGetUserInterestsResult
	if err = p.c.Call(ctx, "GetUserInterests", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
