// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package recommend

import (
	"context"
	"fmt"
)

type UserInterest struct {
	UserId    int64   `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	TagName   string  `thrift:"tag_name,2" frugal:"2,default,string" json:"tag_name"`
	Weight    float64 `thrift:"weight,3" frugal:"3,default,double" json:"weight"`
	UpdatedAt int64   `thrift:"updated_at,4" frugal:"4,default,i64" json:"updated_at"`
}

func NewUserInterest() *UserInterest {
	return &UserInterest{}
}

func (p *UserInterest) InitDefault() {
}

func (p *UserInterest) GetUserId() (v int64) {
	return p.UserId
}

func (p *UserInterest) GetTagName() (v string) {
	return p.TagName
}

func (p *UserInterest) GetWeight() (v float64) {
	return p.Weight
}

func (p *UserInterest) GetUpdatedAt() (v int64) {
	return p.UpdatedAt
}
func (p *UserInterest) SetUserId(val int64) {
	p.UserId = val
}
func (p *UserInterest) SetTagName(val string) {
	p.TagName = val
}
func (p *UserInterest) SetWeight(val float64) {
	p.Weight = val
}
func (p *UserInterest) SetUpdatedAt(val int64) {
	p.UpdatedAt = val
}

func (p *UserInterest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInterest(%+v)", *p)
}

var fieldIDToName_UserInterest = map[int16]string{
	1: "user_id",
	2: "tag_name",
	3: "weight",
	4: "updated_at",
}

type WatchHistory struct {
	UserId        int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	VideoId       int64 `thrift:"video_id,2" frugal:"2,default,i64" json:"video_id"`
	WatchDuration int32 `thrift:"watch_duration,3" frugal:"3,default,i32" json:"watch_duration"`
	CreatedAt     int64 `thrift:"created_at,4" frugal:"4,default,i64" json:"created_at"`
}

func NewWatchHistory() *WatchHistory {
	return &WatchHistory{}
}

func (p *WatchHistory) InitDefault() {
}

func (p *WatchHistory) GetUserId() (v int64) {
	return p.UserId
}

func (p *WatchHistory) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *WatchHistory) GetWatchDuration() (v int32) {
	return p.WatchDuration
}

func (p *WatchHistory) GetCreatedAt() (v int64) {
	return p.CreatedAt
}
func (p *WatchHistory) SetUserId(val int64) {
	p.UserId = val
}
func (p *WatchHistory) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *WatchHistory) SetWatchDuration(val int32) {
	p.WatchDuration = val
}
func (p *WatchHistory) SetCreatedAt(val int64) {
	p.CreatedAt = val
}

func (p *WatchHistory) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WatchHistory(%+v)", *p)
}

var fieldIDToName_WatchHistory = map[int16]string{
	1: "user_id",
	2: "video_id",
	3: "watch_duration",
	4: "created_at",
}

type Video struct {
	Id          int64   `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	UserId      int64   `thrift:"user_id,2" frugal:"2,default,i64" json:"user_id"`
	Title       string  `thrift:"title,3" frugal:"3,default,string" json:"title"`
	Description string  `thrift:"description,4" frugal:"4,default,string" json:"description"`
	CoverUrl    string  `thrift:"cover_url,5" frugal:"5,default,string" json:"cover_url"`
	VideoUrl    string  `thrift:"video_url,6" frugal:"6,default,string" json:"video_url"`
	Status      int32   `thrift:"status,7" frugal:"7,default,i32" json:"status"`
	CreatedAt   int64   `thrift:"created_at,8" frugal:"8,default,i64" json:"created_at"`
	UpdatedAt   int64   `thrift:"updated_at,9" frugal:"9,default,i64" json:"updated_at"`
	Score       float64 `thrift:"score,10" frugal:"10,default,double" json:"score"`
}

func NewVideo() *Video {
	return &Video{}
}

func (p *Video) InitDefault() {
}

func (p *Video) GetId() (v int64) {
	return p.Id
}

func (p *Video) GetUserId() (v int64) {
	return p.UserId
}

func (p *Video) GetTitle() (v string) {
	return p.Title
}

func (p *Video) GetDescription() (v string) {
	return p.Description
}

func (p *Video) GetCoverUrl() (v string) {
	return p.CoverUrl
}

func (p *Video) GetVideoUrl() (v string) {
	return p.VideoUrl
}

func (p *Video) GetStatus() (v int32) {
	return p.Status
}

func (p *Video) GetCreatedAt() (v int64) {
	return p.CreatedAt
}

func (p *Video) GetUpdatedAt() (v int64) {
	return p.UpdatedAt
}

func (p *Video) GetScore() (v float64) {
	return p.Score
}
func (p *Video) SetId(val int64) {
	p.Id = val
}
func (p *Video) SetUserId(val int64) {
	p.UserId = val
}
func (p *Video) SetTitle(val string) {
	p.Title = val
}
func (p *Video) SetDescription(val string) {
	p.Description = val
}
func (p *Video) SetCoverUrl(val string) {
	p.CoverUrl = val
}
func (p *Video) SetVideoUrl(val string) {
	p.VideoUrl = val
}
func (p *Video) SetStatus(val int32) {
	p.Status = val
}
func (p *Video) SetCreatedAt(val int64) {
	p.CreatedAt = val
}
func (p *Video) SetUpdatedAt(val int64) {
	p.UpdatedAt = val
}
func (p *Video) SetScore(val float64) {
	p.Score = val
}

func (p *Video) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Video(%+v)", *p)
}

var fieldIDToName_Video = map[int16]string{
	1:  "id",
	2:  "user_id",
	3:  "title",
	4:  "description",
	5:  "cover_url",
	6:  "video_url",
	7:  "status",
	8:  "created_at",
	9:  "updated_at",
	10: "score",
}

type VideoTag struct {
	VideoId int64   `thrift:"video_id,1" frugal:"1,default,i64" json:"video_id"`
	TagName string  `thrift:"tag_name,2" frugal:"2,default,string" json:"tag_name"`
	Weight  float64 `thrift:"weight,3" frugal:"3,default,double" json:"weight"`
}

func NewVideoTag() *VideoTag {
	return &VideoTag{}
}

func (p *VideoTag) InitDefault() {
}

func (p *VideoTag) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *VideoTag) GetTagName() (v string) {
	return p.TagName
}

func (p *VideoTag) GetWeight() (v float64) {
	return p.Weight
}
func (p *VideoTag) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *VideoTag) SetTagName(val string) {
	p.TagName = val
}
func (p *VideoTag) SetWeight(val float64) {
	p.Weight = val
}

func (p *VideoTag) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoTag(%+v)", *p)
}

var fieldIDToName_VideoTag = map[int16]string{
	1: "video_id",
	2: "tag_name",
	3: "weight",
}

type GetFeedRequest struct {
	UserId    int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	LastTime  int64 `thrift:"last_time,2" frugal:"2,default,i64" json:"last_time"`
	Count     int32 `thrift:"count,3" frugal:"3,default,i32" json:"count"`
	IsRefresh bool  `thrift:"is_refresh,4" frugal:"4,default,bool" json:"is_refresh"`
}

func NewGetFeedRequest() *GetFeedRequest {
	return &GetFeedRequest{}
}

func (p *GetFeedRequest) InitDefault() {
}

func (p *GetFeedRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *GetFeedRequest) GetLastTime() (v int64) {
	return p.LastTime
}

func (p *GetFeedRequest) GetCount() (v int32) {
	return p.Count
}

func (p *GetFeedRequest) GetIsRefresh() (v bool) {
	return p.IsRefresh
}
func (p *GetFeedRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *GetFeedRequest) SetLastTime(val int64) {
	p.LastTime = val
}
func (p *GetFeedRequest) SetCount(val int32) {
	p.Count = val
}
func (p *GetFeedRequest) SetIsRefresh(val bool) {
	p.IsRefresh = val
}

func (p *GetFeedRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFeedRequest(%+v)", *p)
}

var fieldIDToName_GetFeedRequest = map[int16]string{
	1: "user_id",
	2: "last_time",
	3: "count",
	4: "is_refresh",
}

type GetFeedResponse struct {
	Videos   []*Video `thrift:"videos,1" frugal:"1,default,list<Video>" json:"videos"`
	NextTime int64    `thrift:"next_time,2" frugal:"2,default,i64" json:"next_time"`
	HasMore  bool     `thrift:"has_more,3" frugal:"3,default,bool" json:"has_more"`
}

func NewGetFeedResponse() *GetFeedResponse {
	return &GetFeedResponse{}
}

func (p *GetFeedResponse) InitDefault() {
}

func (p *GetFeedResponse) GetVideos() (v []*Video) {
	return p.Videos
}

func (p *GetFeedResponse) GetNextTime() (v int64) {
	return p.NextTime
}

func (p *GetFeedResponse) GetHasMore() (v bool) {
	return p.HasMore
}
func (p *GetFeedResponse) SetVideos(val []*Video) {
	p.Videos = val
}
func (p *GetFeedResponse) SetNextTime(val int64) {
	p.NextTime = val
}
func (p *GetFeedResponse) SetHasMore(val bool) {
	p.HasMore = val
}

func (p *GetFeedResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFeedResponse(%+v)", *p)
}

var fieldIDToName_GetFeedResponse = map[int16]string{
	1: "videos",
	2: "next_time",
	3: "has_more",
}

type UpdateUserProfileRequest struct {
	UserId        int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	VideoId       int64 `thrift:"video_id,2" frugal:"2,default,i64" json:"video_id"`
	WatchDuration int32 `thrift:"watch_duration,3" frugal:"3,default,i32" json:"watch_duration"`
	IsLike        bool  `thrift:"is_like,4" frugal:"4,default,bool" json:"is_like"`
	IsComment     bool  `thrift:"is_comment,5" frugal:"5,default,bool" json:"is_comment"`
	IsShare       bool  `thrift:"is_share,6" frugal:"6,default,bool" json:"is_share"`
}

func NewUpdateUserProfileRequest() *UpdateUserProfileRequest {
	return &UpdateUserProfileRequest{}
}

func (p *UpdateUserProfileRequest) InitDefault() {
}

func (p *UpdateUserProfileRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *UpdateUserProfileRequest) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *UpdateUserProfileRequest) GetWatchDuration() (v int32) {
	return p.WatchDuration
}

func (p *UpdateUserProfileRequest) GetIsLike() (v bool) {
	return p.IsLike
}

func (p *UpdateUserProfileRequest) GetIsComment() (v bool) {
	return p.IsComment
}

func (p *UpdateUserProfileRequest) GetIsShare() (v bool) {
	return p.IsShare
}
func (p *UpdateUserProfileRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *UpdateUserProfileRequest) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *UpdateUserProfileRequest) SetWatchDuration(val int32) {
	p.WatchDuration = val
}
func (p *UpdateUserProfileRequest) SetIsLike(val bool) {
	p.IsLike = val
}
func (p *UpdateUserProfileRequest) SetIsComment(val bool) {
	p.IsComment = val
}
func (p *UpdateUserProfileRequest) SetIsShare(val bool) {
	p.IsShare = val
}

func (p *UpdateUserProfileRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateUserProfileRequest(%+v)", *p)
}

var fieldIDToName_UpdateUserProfileRequest = map[int16]string{
	1: "user_id",
	2: "video_id",
	3: "watch_duration",
	4: "is_like",
	5: "is_comment",
	6: "is_share",
}

type UpdateUserProfileResponse struct {
	Success bool   `thrift:"success,1" frugal:"1,default,bool" json:"success"`
	Message string `thrift:"message,2" frugal:"2,default,string" json:"message"`
}

func NewUpdateUserProfileResponse() *UpdateUserProfileResponse {
	return &UpdateUserProfileResponse{}
}

func (p *UpdateUserProfileResponse) InitDefault() {
}

func (p *UpdateUserProfileResponse) GetSuccess() (v bool) {
	return p.Success
}

func (p *UpdateUserProfileResponse) GetMessage() (v string) {
	return p.Message
}
func (p *UpdateUserProfileResponse) SetSuccess(val bool) {
	p.Success = val
}
func (p *UpdateUserProfileResponse) SetMessage(val string) {
	p.Message = val
}

func (p *UpdateUserProfileResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateUserProfileResponse(%+v)", *p)
}

var fieldIDToName_UpdateUserProfileResponse = map[int16]string{
	1: "success",
	2: "message",
}

type GetUserInterestsRequest struct {
	UserId int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
}

func NewGetUserInterestsRequest() *GetUserInterestsRequest {
	return &GetUserInterestsRequest{}
}

func (p *GetUserInterestsRequest) InitDefault() {
}

func (p *GetUserInterestsRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *GetUserInterestsRequest) SetUserId(val int64) {
	p.UserId = val
}

func (p *GetUserInterestsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserInterestsRequest(%+v)", *p)
}

var fieldIDToName_GetUserInterestsRequest = map[int16]string{
	1: "user_id",
}

type GetUserInterestsResponse struct {
	Interests []*UserInterest `thrift:"interests,1" frugal:"1,default,list<UserInterest>" json:"interests"`
}

func NewGetUserInterestsResponse() *GetUserInterestsResponse {
	return &GetUserInterestsResponse{}
}

func (p *GetUserInterestsResponse) InitDefault() {
}

func (p *GetUserInterestsResponse) GetInterests() (v []*UserInterest) {
	return p.Interests
}
func (p *GetUserInterestsResponse) SetInterests(val []*UserInterest) {
	p.Interests = val
}

func (p *GetUserInterestsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserInterestsResponse(%+v)", *p)
}

var fieldIDToName_GetUserInterestsResponse = map[int16]string{
	1: "interests",
}

type RecommendService interface {
	GetFeed(ctx context.Context, req *GetFeedRequest) (r *GetFeedResponse, err error)

	UpdateUserProfile(ctx context.Context, req *UpdateUserProfileRequest) (r *UpdateUserProfileResponse, err error)

	GetUserInterests(ctx context.Context, req *GetUserInterestsRequest) (r *GetUserInterestsResponse, err error)
}

type RecommendServiceGetFeedArgs struct {
	Req *GetFeedRequest `thrift:"req,1" frugal:"1,default,GetFeedRequest" json:"req"`
}

func NewRecommendServiceGetFeedArgs() *RecommendServiceGetFeedArgs {
	return &RecommendServiceGetFeedArgs{}
}

func (p *RecommendServiceGetFeedArgs) InitDefault() {
}

var RecommendServiceGetFeedArgs_Req_DEFAULT *GetFeedRequest

func (p *RecommendServiceGetFeedArgs) GetReq() (v *GetFeedRequest) {
	if !p.IsSetReq() {
		return RecommendServiceGetFeedArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RecommendServiceGetFeedArgs) SetReq(val *GetFeedRequest) {
	p.Req = val
}

func (p *RecommendServiceGetFeedArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RecommendServiceGetFeedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecommendServiceGetFeedArgs(%+v)", *p)
}

var fieldIDToName_RecommendServiceGetFeedArgs = map[int16]string{
	1: "req",
}

type RecommendServiceGetFeedResult struct {
	Success *GetFeedResponse `thrift:"success,0,optional" frugal:"0,optional,GetFeedResponse" json:"success,omitempty"`
}

func NewRecommendServiceGetFeedResult() *RecommendServiceGetFeedResult {
	return &RecommendServiceGetFeedResult{}
}

func (p *RecommendServiceGetFeedResult) InitDefault() {
}

var RecommendServiceGetFeedResult_Success_DEFAULT *GetFeedResponse

func (p *RecommendServiceGetFeedResult) GetSuccess() (v *GetFeedResponse) {
	if !p.IsSetSuccess() {
		return RecommendServiceGetFeedResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RecommendServiceGetFeedResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetFeedResponse)
}

func (p *RecommendServiceGetFeedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RecommendServiceGetFeedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecommendServiceGetFeedResult(%+v)", *p)
}

var fieldIDToName_RecommendServiceGetFeedResult = map[int16]string{
	0: "success",
}

type RecommendServiceUpdateUserProfileArgs struct {
	Req *UpdateUserProfileRequest `thrift:"req,1" frugal:"1,default,UpdateUserProfileRequest" json:"req"`
}

func NewRecommendServiceUpdateUserProfileArgs() *RecommendServiceUpdateUserProfileArgs {
	return &RecommendServiceUpdateUserProfileArgs{}
}

func (p *RecommendServiceUpdateUserProfileArgs) InitDefault() {
}

var RecommendServiceUpdateUserProfileArgs_Req_DEFAULT *UpdateUserProfileRequest

func (p *RecommendServiceUpdateUserProfileArgs) GetReq() (v *UpdateUserProfileRequest) {
	if !p.IsSetReq() {
		return RecommendServiceUpdateUserProfileArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RecommendServiceUpdateUserProfileArgs) SetReq(val *UpdateUserProfileRequest) {
	p.Req = val
}

func (p *RecommendServiceUpdateUserProfileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RecommendServiceUpdateUserProfileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecommendServiceUpdateUserProfileArgs(%+v)", *p)
}

var fieldIDToName_RecommendServiceUpdateUserProfileArgs = map[int16]string{
	1: "req",
}

type RecommendServiceUpdateUserProfileResult struct {
	Success *UpdateUserProfileResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateUserProfileResponse" json:"success,omitempty"`
}

func NewRecommendServiceUpdateUserProfileResult() *RecommendServiceUpdateUserProfileResult {
	return &RecommendServiceUpdateUserProfileResult{}
}

func (p *RecommendServiceUpdateUserProfileResult) InitDefault() {
}

var RecommendServiceUpdateUserProfileResult_Success_DEFAULT *UpdateUserProfileResponse

func (p *RecommendServiceUpdateUserProfileResult) GetSuccess() (v *UpdateUserProfileResponse) {
	if !p.IsSetSuccess() {
		return RecommendServiceUpdateUserProfileResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RecommendServiceUpdateUserProfileResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateUserProfileResponse)
}

func (p *RecommendServiceUpdateUserProfileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RecommendServiceUpdateUserProfileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecommendServiceUpdateUserProfileResult(%+v)", *p)
}

var fieldIDToName_RecommendServiceUpdateUserProfileResult = map[int16]string{
	0: "success",
}

type RecommendServiceGetUserInterestsArgs struct {
	Req *GetUserInterestsRequest `thrift:"req,1" frugal:"1,default,GetUserInterestsRequest" json:"req"`
}

func NewRecommendServiceGetUserInterestsArgs() *RecommendServiceGetUserInterestsArgs {
	return &RecommendServiceGetUserInterestsArgs{}
}

func (p *RecommendServiceGetUserInterestsArgs) InitDefault() {
}

var RecommendServiceGetUserInterestsArgs_Req_DEFAULT *GetUserInterestsRequest

func (p *RecommendServiceGetUserInterestsArgs) GetReq() (v *GetUserInterestsRequest) {
	if !p.IsSetReq() {
		return RecommendServiceGetUserInterestsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RecommendServiceGetUserInterestsArgs) SetReq(val *GetUserInterestsRequest) {
	p.Req = val
}

func (p *RecommendServiceGetUserInterestsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RecommendServiceGetUserInterestsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecommendServiceGetUserInterestsArgs(%+v)", *p)
}

var fieldIDToName_RecommendServiceGetUserInterestsArgs = map[int16]string{
	1: "req",
}

type RecommendServiceGetUserInterestsResult struct {
	Success *GetUserInterestsResponse `thrift:"success,0,optional" frugal:"0,optional,GetUserInterestsResponse" json:"success,omitempty"`
}

func NewRecommendServiceGetUserInterestsResult() *RecommendServiceGetUserInterestsResult {
	return &RecommendServiceGetUserInterestsResult{}
}

func (p *RecommendServiceGetUserInterestsResult) InitDefault() {
}

var RecommendServiceGetUserInterestsResult_Success_DEFAULT *GetUserInterestsResponse

func (p *RecommendServiceGetUserInterestsResult) GetSuccess() (v *GetUserInterestsResponse) {
	if !p.IsSetSuccess() {
		return RecommendServiceGetUserInterestsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RecommendServiceGetUserInterestsResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetUserInterestsResponse)
}

func (p *RecommendServiceGetUserInterestsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RecommendServiceGetUserInterestsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecommendServiceGetUserInterestsResult(%+v)", *p)
}

var fieldIDToName_RecommendServiceGetUserInterestsResult = map[int16]string{
	0: "success",
}
